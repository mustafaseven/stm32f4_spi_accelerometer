
spi_accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008f74  08008f74  00018f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f90  08008f90  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008f90  08008f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f98  08008f98  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f98  08008f98  00018f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f9c  08008f9c  00018f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000090  08009030  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  08009030  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7c8  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bee  00000000  00000000  0003a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0003e478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0003f5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023eeb  00000000  00000000  00040588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177dc  00000000  00000000  00064473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb6bd  00000000  00000000  0007bc4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014730c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a08  00000000  00000000  00147360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f5c 	.word	0x08008f5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008f5c 	.word	0x08008f5c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_uldivmod>:
 8000964:	b953      	cbnz	r3, 800097c <__aeabi_uldivmod+0x18>
 8000966:	b94a      	cbnz	r2, 800097c <__aeabi_uldivmod+0x18>
 8000968:	2900      	cmp	r1, #0
 800096a:	bf08      	it	eq
 800096c:	2800      	cmpeq	r0, #0
 800096e:	bf1c      	itt	ne
 8000970:	f04f 31ff 	movne.w	r1, #4294967295
 8000974:	f04f 30ff 	movne.w	r0, #4294967295
 8000978:	f000 b96e 	b.w	8000c58 <__aeabi_idiv0>
 800097c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000980:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000984:	f000 f806 	bl	8000994 <__udivmoddi4>
 8000988:	f8dd e004 	ldr.w	lr, [sp, #4]
 800098c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000990:	b004      	add	sp, #16
 8000992:	4770      	bx	lr

08000994 <__udivmoddi4>:
 8000994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000998:	9d08      	ldr	r5, [sp, #32]
 800099a:	4604      	mov	r4, r0
 800099c:	468c      	mov	ip, r1
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f040 8083 	bne.w	8000aaa <__udivmoddi4+0x116>
 80009a4:	428a      	cmp	r2, r1
 80009a6:	4617      	mov	r7, r2
 80009a8:	d947      	bls.n	8000a3a <__udivmoddi4+0xa6>
 80009aa:	fab2 f282 	clz	r2, r2
 80009ae:	b142      	cbz	r2, 80009c2 <__udivmoddi4+0x2e>
 80009b0:	f1c2 0020 	rsb	r0, r2, #32
 80009b4:	fa24 f000 	lsr.w	r0, r4, r0
 80009b8:	4091      	lsls	r1, r2
 80009ba:	4097      	lsls	r7, r2
 80009bc:	ea40 0c01 	orr.w	ip, r0, r1
 80009c0:	4094      	lsls	r4, r2
 80009c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80009c6:	0c23      	lsrs	r3, r4, #16
 80009c8:	fbbc f6f8 	udiv	r6, ip, r8
 80009cc:	fa1f fe87 	uxth.w	lr, r7
 80009d0:	fb08 c116 	mls	r1, r8, r6, ip
 80009d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d8:	fb06 f10e 	mul.w	r1, r6, lr
 80009dc:	4299      	cmp	r1, r3
 80009de:	d909      	bls.n	80009f4 <__udivmoddi4+0x60>
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80009e6:	f080 8119 	bcs.w	8000c1c <__udivmoddi4+0x288>
 80009ea:	4299      	cmp	r1, r3
 80009ec:	f240 8116 	bls.w	8000c1c <__udivmoddi4+0x288>
 80009f0:	3e02      	subs	r6, #2
 80009f2:	443b      	add	r3, r7
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80009fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a08:	45a6      	cmp	lr, r4
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x8c>
 8000a0c:	193c      	adds	r4, r7, r4
 8000a0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a12:	f080 8105 	bcs.w	8000c20 <__udivmoddi4+0x28c>
 8000a16:	45a6      	cmp	lr, r4
 8000a18:	f240 8102 	bls.w	8000c20 <__udivmoddi4+0x28c>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	443c      	add	r4, r7
 8000a20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a24:	eba4 040e 	sub.w	r4, r4, lr
 8000a28:	2600      	movs	r6, #0
 8000a2a:	b11d      	cbz	r5, 8000a34 <__udivmoddi4+0xa0>
 8000a2c:	40d4      	lsrs	r4, r2
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e9c5 4300 	strd	r4, r3, [r5]
 8000a34:	4631      	mov	r1, r6
 8000a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3a:	b902      	cbnz	r2, 8000a3e <__udivmoddi4+0xaa>
 8000a3c:	deff      	udf	#255	; 0xff
 8000a3e:	fab2 f282 	clz	r2, r2
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	d150      	bne.n	8000ae8 <__udivmoddi4+0x154>
 8000a46:	1bcb      	subs	r3, r1, r7
 8000a48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a4c:	fa1f f887 	uxth.w	r8, r7
 8000a50:	2601      	movs	r6, #1
 8000a52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a56:	0c21      	lsrs	r1, r4, #16
 8000a58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a60:	fb08 f30c 	mul.w	r3, r8, ip
 8000a64:	428b      	cmp	r3, r1
 8000a66:	d907      	bls.n	8000a78 <__udivmoddi4+0xe4>
 8000a68:	1879      	adds	r1, r7, r1
 8000a6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a6e:	d202      	bcs.n	8000a76 <__udivmoddi4+0xe2>
 8000a70:	428b      	cmp	r3, r1
 8000a72:	f200 80e9 	bhi.w	8000c48 <__udivmoddi4+0x2b4>
 8000a76:	4684      	mov	ip, r0
 8000a78:	1ac9      	subs	r1, r1, r3
 8000a7a:	b2a3      	uxth	r3, r4
 8000a7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a88:	fb08 f800 	mul.w	r8, r8, r0
 8000a8c:	45a0      	cmp	r8, r4
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0x10c>
 8000a90:	193c      	adds	r4, r7, r4
 8000a92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a96:	d202      	bcs.n	8000a9e <__udivmoddi4+0x10a>
 8000a98:	45a0      	cmp	r8, r4
 8000a9a:	f200 80d9 	bhi.w	8000c50 <__udivmoddi4+0x2bc>
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	eba4 0408 	sub.w	r4, r4, r8
 8000aa4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000aa8:	e7bf      	b.n	8000a2a <__udivmoddi4+0x96>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d909      	bls.n	8000ac2 <__udivmoddi4+0x12e>
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	f000 80b1 	beq.w	8000c16 <__udivmoddi4+0x282>
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	e9c5 0100 	strd	r0, r1, [r5]
 8000aba:	4630      	mov	r0, r6
 8000abc:	4631      	mov	r1, r6
 8000abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac2:	fab3 f683 	clz	r6, r3
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d14a      	bne.n	8000b60 <__udivmoddi4+0x1cc>
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d302      	bcc.n	8000ad4 <__udivmoddi4+0x140>
 8000ace:	4282      	cmp	r2, r0
 8000ad0:	f200 80b8 	bhi.w	8000c44 <__udivmoddi4+0x2b0>
 8000ad4:	1a84      	subs	r4, r0, r2
 8000ad6:	eb61 0103 	sbc.w	r1, r1, r3
 8000ada:	2001      	movs	r0, #1
 8000adc:	468c      	mov	ip, r1
 8000ade:	2d00      	cmp	r5, #0
 8000ae0:	d0a8      	beq.n	8000a34 <__udivmoddi4+0xa0>
 8000ae2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ae6:	e7a5      	b.n	8000a34 <__udivmoddi4+0xa0>
 8000ae8:	f1c2 0320 	rsb	r3, r2, #32
 8000aec:	fa20 f603 	lsr.w	r6, r0, r3
 8000af0:	4097      	lsls	r7, r2
 8000af2:	fa01 f002 	lsl.w	r0, r1, r2
 8000af6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000afa:	40d9      	lsrs	r1, r3
 8000afc:	4330      	orrs	r0, r6
 8000afe:	0c03      	lsrs	r3, r0, #16
 8000b00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b04:	fa1f f887 	uxth.w	r8, r7
 8000b08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b10:	fb06 f108 	mul.w	r1, r6, r8
 8000b14:	4299      	cmp	r1, r3
 8000b16:	fa04 f402 	lsl.w	r4, r4, r2
 8000b1a:	d909      	bls.n	8000b30 <__udivmoddi4+0x19c>
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b22:	f080 808d 	bcs.w	8000c40 <__udivmoddi4+0x2ac>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 808a 	bls.w	8000c40 <__udivmoddi4+0x2ac>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	443b      	add	r3, r7
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b281      	uxth	r1, r0
 8000b34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b40:	fb00 f308 	mul.w	r3, r0, r8
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x1c4>
 8000b48:	1879      	adds	r1, r7, r1
 8000b4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b4e:	d273      	bcs.n	8000c38 <__udivmoddi4+0x2a4>
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d971      	bls.n	8000c38 <__udivmoddi4+0x2a4>
 8000b54:	3802      	subs	r0, #2
 8000b56:	4439      	add	r1, r7
 8000b58:	1acb      	subs	r3, r1, r3
 8000b5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b5e:	e778      	b.n	8000a52 <__udivmoddi4+0xbe>
 8000b60:	f1c6 0c20 	rsb	ip, r6, #32
 8000b64:	fa03 f406 	lsl.w	r4, r3, r6
 8000b68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b6c:	431c      	orrs	r4, r3
 8000b6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b72:	fa01 f306 	lsl.w	r3, r1, r6
 8000b76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	0c3b      	lsrs	r3, r7, #16
 8000b82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b86:	fa1f f884 	uxth.w	r8, r4
 8000b8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b92:	fb09 fa08 	mul.w	sl, r9, r8
 8000b96:	458a      	cmp	sl, r1
 8000b98:	fa02 f206 	lsl.w	r2, r2, r6
 8000b9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000ba0:	d908      	bls.n	8000bb4 <__udivmoddi4+0x220>
 8000ba2:	1861      	adds	r1, r4, r1
 8000ba4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ba8:	d248      	bcs.n	8000c3c <__udivmoddi4+0x2a8>
 8000baa:	458a      	cmp	sl, r1
 8000bac:	d946      	bls.n	8000c3c <__udivmoddi4+0x2a8>
 8000bae:	f1a9 0902 	sub.w	r9, r9, #2
 8000bb2:	4421      	add	r1, r4
 8000bb4:	eba1 010a 	sub.w	r1, r1, sl
 8000bb8:	b2bf      	uxth	r7, r7
 8000bba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000bc6:	fb00 f808 	mul.w	r8, r0, r8
 8000bca:	45b8      	cmp	r8, r7
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x24a>
 8000bce:	19e7      	adds	r7, r4, r7
 8000bd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd4:	d22e      	bcs.n	8000c34 <__udivmoddi4+0x2a0>
 8000bd6:	45b8      	cmp	r8, r7
 8000bd8:	d92c      	bls.n	8000c34 <__udivmoddi4+0x2a0>
 8000bda:	3802      	subs	r0, #2
 8000bdc:	4427      	add	r7, r4
 8000bde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000be2:	eba7 0708 	sub.w	r7, r7, r8
 8000be6:	fba0 8902 	umull	r8, r9, r0, r2
 8000bea:	454f      	cmp	r7, r9
 8000bec:	46c6      	mov	lr, r8
 8000bee:	4649      	mov	r1, r9
 8000bf0:	d31a      	bcc.n	8000c28 <__udivmoddi4+0x294>
 8000bf2:	d017      	beq.n	8000c24 <__udivmoddi4+0x290>
 8000bf4:	b15d      	cbz	r5, 8000c0e <__udivmoddi4+0x27a>
 8000bf6:	ebb3 020e 	subs.w	r2, r3, lr
 8000bfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000bfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c02:	40f2      	lsrs	r2, r6
 8000c04:	ea4c 0202 	orr.w	r2, ip, r2
 8000c08:	40f7      	lsrs	r7, r6
 8000c0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c0e:	2600      	movs	r6, #0
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	462e      	mov	r6, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e70b      	b.n	8000a34 <__udivmoddi4+0xa0>
 8000c1c:	4606      	mov	r6, r0
 8000c1e:	e6e9      	b.n	80009f4 <__udivmoddi4+0x60>
 8000c20:	4618      	mov	r0, r3
 8000c22:	e6fd      	b.n	8000a20 <__udivmoddi4+0x8c>
 8000c24:	4543      	cmp	r3, r8
 8000c26:	d2e5      	bcs.n	8000bf4 <__udivmoddi4+0x260>
 8000c28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c30:	3801      	subs	r0, #1
 8000c32:	e7df      	b.n	8000bf4 <__udivmoddi4+0x260>
 8000c34:	4608      	mov	r0, r1
 8000c36:	e7d2      	b.n	8000bde <__udivmoddi4+0x24a>
 8000c38:	4660      	mov	r0, ip
 8000c3a:	e78d      	b.n	8000b58 <__udivmoddi4+0x1c4>
 8000c3c:	4681      	mov	r9, r0
 8000c3e:	e7b9      	b.n	8000bb4 <__udivmoddi4+0x220>
 8000c40:	4666      	mov	r6, ip
 8000c42:	e775      	b.n	8000b30 <__udivmoddi4+0x19c>
 8000c44:	4630      	mov	r0, r6
 8000c46:	e74a      	b.n	8000ade <__udivmoddi4+0x14a>
 8000c48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c4c:	4439      	add	r1, r7
 8000c4e:	e713      	b.n	8000a78 <__udivmoddi4+0xe4>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	e724      	b.n	8000aa0 <__udivmoddi4+0x10c>
 8000c56:	bf00      	nop

08000c58 <__aeabi_idiv0>:
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <LIS3DSH_HAL_ReadReg16>:

 /*
 * @about: LIS3DSH Read 8 bit data from register
 */
 uint16_t LIS3DSH_HAL_ReadReg16(uint8_t reg)
 {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
    transmitBuffer[0] = 0x80 | reg;
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <LIS3DSH_HAL_ReadReg16+0x9c>)
 8000c70:	701a      	strb	r2, [r3, #0]
    static uint8_t r1,r2;
    SPI1CSLOW;
 8000c72:	2200      	movs	r2, #0
 8000c74:	2108      	movs	r1, #8
 8000c76:	4821      	ldr	r0, [pc, #132]	; (8000cfc <LIS3DSH_HAL_ReadReg16+0xa0>)
 8000c78:	f001 f846 	bl	8001d08 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1,transmitBuffer,1,5000);
 8000c7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c80:	2201      	movs	r2, #1
 8000c82:	491d      	ldr	r1, [pc, #116]	; (8000cf8 <LIS3DSH_HAL_ReadReg16+0x9c>)
 8000c84:	481e      	ldr	r0, [pc, #120]	; (8000d00 <LIS3DSH_HAL_ReadReg16+0xa4>)
 8000c86:	f004 f9ca 	bl	800501e <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(&hspi1)== HAL_SPI_STATE_BUSY_TX) {}
 8000c8a:	bf00      	nop
 8000c8c:	481c      	ldr	r0, [pc, #112]	; (8000d00 <LIS3DSH_HAL_ReadReg16+0xa4>)
 8000c8e:	f004 fdb5 	bl	80057fc <HAL_SPI_GetState>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d0f9      	beq.n	8000c8c <LIS3DSH_HAL_ReadReg16+0x30>

    HAL_SPI_Receive(&hspi1,&r1,1,5000);
 8000c98:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4919      	ldr	r1, [pc, #100]	; (8000d04 <LIS3DSH_HAL_ReadReg16+0xa8>)
 8000ca0:	4817      	ldr	r0, [pc, #92]	; (8000d00 <LIS3DSH_HAL_ReadReg16+0xa4>)
 8000ca2:	f004 faf8 	bl	8005296 <HAL_SPI_Receive>
    while(HAL_SPI_GetState(&hspi1)== HAL_SPI_STATE_BUSY_RX){}
 8000ca6:	bf00      	nop
 8000ca8:	4815      	ldr	r0, [pc, #84]	; (8000d00 <LIS3DSH_HAL_ReadReg16+0xa4>)
 8000caa:	f004 fda7 	bl	80057fc <HAL_SPI_GetState>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	d0f9      	beq.n	8000ca8 <LIS3DSH_HAL_ReadReg16+0x4c>

    HAL_SPI_Receive(&hspi1,&r2,1,5000);
 8000cb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4913      	ldr	r1, [pc, #76]	; (8000d08 <LIS3DSH_HAL_ReadReg16+0xac>)
 8000cbc:	4810      	ldr	r0, [pc, #64]	; (8000d00 <LIS3DSH_HAL_ReadReg16+0xa4>)
 8000cbe:	f004 faea 	bl	8005296 <HAL_SPI_Receive>
    while(HAL_SPI_GetState(&hspi1)== HAL_SPI_STATE_BUSY_RX){}
 8000cc2:	bf00      	nop
 8000cc4:	480e      	ldr	r0, [pc, #56]	; (8000d00 <LIS3DSH_HAL_ReadReg16+0xa4>)
 8000cc6:	f004 fd99 	bl	80057fc <HAL_SPI_GetState>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d0f9      	beq.n	8000cc4 <LIS3DSH_HAL_ReadReg16+0x68>

    SPI1CSHIGH;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2108      	movs	r1, #8
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <LIS3DSH_HAL_ReadReg16+0xa0>)
 8000cd6:	f001 f817 	bl	8001d08 <HAL_GPIO_WritePin>

    return(r1|(r2<<8));
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <LIS3DSH_HAL_ReadReg16+0xa8>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b21a      	sxth	r2, r3
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <LIS3DSH_HAL_ReadReg16+0xac>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	b29b      	uxth	r3, r3
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000c4 	.word	0x200000c4
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	20000150 	.word	0x20000150
 8000d04:	200000ac 	.word	0x200000ac
 8000d08:	200000ad 	.word	0x200000ad

08000d0c <LIS3DSH_HAL_WriteReg8>:

/*
 * @about: LIS3DSH Read 8 bit data from register
 */
uint8_t LIS3DSH_HAL_WriteReg8(uint8_t reg,uint8_t val)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	460a      	mov	r2, r1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71bb      	strb	r3, [r7, #6]
    transmitBuffer[0] = ( ~0x80 & reg );
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <LIS3DSH_HAL_WriteReg8+0x90>)
 8000d26:	701a      	strb	r2, [r3, #0]
    transmitBuffer[1] = ( val );
 8000d28:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <LIS3DSH_HAL_WriteReg8+0x90>)
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	7053      	strb	r3, [r2, #1]
    transmitBufLen = 1;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <LIS3DSH_HAL_WriteReg8+0x94>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
    SPI1CSLOW;
 8000d34:	2200      	movs	r2, #0
 8000d36:	2108      	movs	r1, #8
 8000d38:	481a      	ldr	r0, [pc, #104]	; (8000da4 <LIS3DSH_HAL_WriteReg8+0x98>)
 8000d3a:	f000 ffe5 	bl	8001d08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1,transmitBuffer,transmitBufLen,5000);
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <LIS3DSH_HAL_WriteReg8+0x94>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d48:	4914      	ldr	r1, [pc, #80]	; (8000d9c <LIS3DSH_HAL_WriteReg8+0x90>)
 8000d4a:	4817      	ldr	r0, [pc, #92]	; (8000da8 <LIS3DSH_HAL_WriteReg8+0x9c>)
 8000d4c:	f004 f967 	bl	800501e <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(&hspi1)== HAL_SPI_STATE_BUSY_TX) {}
 8000d50:	bf00      	nop
 8000d52:	4815      	ldr	r0, [pc, #84]	; (8000da8 <LIS3DSH_HAL_WriteReg8+0x9c>)
 8000d54:	f004 fd52 	bl	80057fc <HAL_SPI_GetState>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d0f9      	beq.n	8000d52 <LIS3DSH_HAL_WriteReg8+0x46>
    transmitBuffer[0] = transmitBuffer[1];
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <LIS3DSH_HAL_WriteReg8+0x90>)
 8000d60:	785a      	ldrb	r2, [r3, #1]
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <LIS3DSH_HAL_WriteReg8+0x90>)
 8000d64:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1,transmitBuffer,transmitBufLen,5000);
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <LIS3DSH_HAL_WriteReg8+0x94>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d70:	490a      	ldr	r1, [pc, #40]	; (8000d9c <LIS3DSH_HAL_WriteReg8+0x90>)
 8000d72:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LIS3DSH_HAL_WriteReg8+0x9c>)
 8000d74:	f004 f953 	bl	800501e <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(&hspi1)== HAL_SPI_STATE_BUSY_TX) {}
 8000d78:	bf00      	nop
 8000d7a:	480b      	ldr	r0, [pc, #44]	; (8000da8 <LIS3DSH_HAL_WriteReg8+0x9c>)
 8000d7c:	f004 fd3e 	bl	80057fc <HAL_SPI_GetState>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d0f9      	beq.n	8000d7a <LIS3DSH_HAL_WriteReg8+0x6e>
    SPI1CSHIGH;
 8000d86:	2201      	movs	r2, #1
 8000d88:	2108      	movs	r1, #8
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <LIS3DSH_HAL_WriteReg8+0x98>)
 8000d8c:	f000 ffbc 	bl	8001d08 <HAL_GPIO_WritePin>

    return(transmitBuffer[0]);
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <LIS3DSH_HAL_WriteReg8+0x90>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000c4 	.word	0x200000c4
 8000da0:	200000c0 	.word	0x200000c0
 8000da4:	40021000 	.word	0x40021000
 8000da8:	20000150 	.word	0x20000150

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db0:	f000 fc66 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db4:	f000 f892 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db8:	f000 f9a6 	bl	8001108 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dbc:	f000 f910 	bl	8000fe0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dc0:	f000 f93c 	bl	800103c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000dc4:	f000 f96a 	bl	800109c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000dc8:	f007 fcb6 	bl	8008738 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2108      	movs	r1, #8
 8000dd0:	483e      	ldr	r0, [pc, #248]	; (8000ecc <main+0x120>)
 8000dd2:	f000 ff99 	bl	8001d08 <HAL_GPIO_WritePin>

  HAL_Delay(5);
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f000 fcc4 	bl	8001764 <HAL_Delay>

  LIS3DSH_HAL_WriteReg8(LIS3DSH_REG_CTRL4, LIS3DSH_ALL_AXIS_EN|LIS3DSH_ODR_3_125);
 8000ddc:	2117      	movs	r1, #23
 8000dde:	2020      	movs	r0, #32
 8000de0:	f7ff ff94 	bl	8000d0c <LIS3DSH_HAL_WriteReg8>
  LIS3DSH_HAL_WriteReg8(LIS3DSH_REG_CTRL5, LIS3DSH_AAFLTR50Hz|LIS3DSH_8g|LIS3DSH_STNORMAL| LIS3DSH_SPI4WIRE );
 8000de4:	21e0      	movs	r1, #224	; 0xe0
 8000de6:	2024      	movs	r0, #36	; 0x24
 8000de8:	f7ff ff90 	bl	8000d0c <LIS3DSH_HAL_WriteReg8>

  LIS3DSH_HAL_WriteReg8(LIS3DSH_REG_OFFX, 0);
 8000dec:	2100      	movs	r1, #0
 8000dee:	2010      	movs	r0, #16
 8000df0:	f7ff ff8c 	bl	8000d0c <LIS3DSH_HAL_WriteReg8>
  LIS3DSH_HAL_WriteReg8(LIS3DSH_REG_OFFY, 0);
 8000df4:	2100      	movs	r1, #0
 8000df6:	2011      	movs	r0, #17
 8000df8:	f7ff ff88 	bl	8000d0c <LIS3DSH_HAL_WriteReg8>
  LIS3DSH_HAL_WriteReg8(LIS3DSH_REG_OFFZ, 0);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2012      	movs	r0, #18
 8000e00:	f7ff ff84 	bl	8000d0c <LIS3DSH_HAL_WriteReg8>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e04:	f007 fcbe 	bl	8008784 <MX_USB_HOST_Process>
    axis[ 0 ] = LIS3DSH_HAL_ReadReg16(LIS3DSH_REG_OUTXL);
 8000e08:	2028      	movs	r0, #40	; 0x28
 8000e0a:	f7ff ff27 	bl	8000c5c <LIS3DSH_HAL_ReadReg16>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <main+0x124>)
 8000e14:	801a      	strh	r2, [r3, #0]
    axis[ 1 ] = LIS3DSH_HAL_ReadReg16(LIS3DSH_REG_OUTYL);
 8000e16:	202a      	movs	r0, #42	; 0x2a
 8000e18:	f7ff ff20 	bl	8000c5c <LIS3DSH_HAL_ReadReg16>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <main+0x124>)
 8000e22:	805a      	strh	r2, [r3, #2]
    axis[ 2 ] = LIS3DSH_HAL_ReadReg16(LIS3DSH_REG_OUTZL);
 8000e24:	202c      	movs	r0, #44	; 0x2c
 8000e26:	f7ff ff19 	bl	8000c5c <LIS3DSH_HAL_ReadReg16>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <main+0x124>)
 8000e30:	809a      	strh	r2, [r3, #4]

    axisg[ 0 ] = axis[ 0 ];
 8000e32:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <main+0x124>)
 8000e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fb17 	bl	800046c <__aeabi_i2d>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4924      	ldr	r1, [pc, #144]	; (8000ed4 <main+0x128>)
 8000e44:	e9c1 2300 	strd	r2, r3, [r1]
    axisg[ 1 ] = axis[ 1 ];
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <main+0x124>)
 8000e4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fb0c 	bl	800046c <__aeabi_i2d>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	491e      	ldr	r1, [pc, #120]	; (8000ed4 <main+0x128>)
 8000e5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    axisg[ 2 ] = axis[ 2 ];
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <main+0x124>)
 8000e60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fb01 	bl	800046c <__aeabi_i2d>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4919      	ldr	r1, [pc, #100]	; (8000ed4 <main+0x128>)
 8000e70:	e9c1 2304 	strd	r2, r3, [r1, #16]

    axisg[ 0 ] = ( axisg[ 0 ] / 16384 );
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <main+0x128>)
 8000e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <main+0x12c>)
 8000e80:	f7ff fc88 	bl	8000794 <__aeabi_ddiv>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4912      	ldr	r1, [pc, #72]	; (8000ed4 <main+0x128>)
 8000e8a:	e9c1 2300 	strd	r2, r3, [r1]
    axisg[ 1 ] = ( axisg[ 1 ] / 16384 );
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <main+0x128>)
 8000e90:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <main+0x12c>)
 8000e9a:	f7ff fc7b 	bl	8000794 <__aeabi_ddiv>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <main+0x128>)
 8000ea4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    axisg[ 2 ] = ( axisg[ 2 ] / 16384 );
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <main+0x128>)
 8000eaa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <main+0x12c>)
 8000eb4:	f7ff fc6e 	bl	8000794 <__aeabi_ddiv>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4905      	ldr	r1, [pc, #20]	; (8000ed4 <main+0x128>)
 8000ebe:	e9c1 2304 	strd	r2, r3, [r1, #16]

    HAL_Delay(10);
 8000ec2:	200a      	movs	r0, #10
 8000ec4:	f000 fc4e 	bl	8001764 <HAL_Delay>
    MX_USB_HOST_Process();
 8000ec8:	e79c      	b.n	8000e04 <main+0x58>
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	2000012c 	.word	0x2000012c
 8000ed4:	20000138 	.word	0x20000138
 8000ed8:	40d00000 	.word	0x40d00000

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b098      	sub	sp, #96	; 0x60
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ee6:	2230      	movs	r2, #48	; 0x30
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f007 ff66 	bl	8008dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <SystemClock_Config+0xfc>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a30      	ldr	r2, [pc, #192]	; (8000fd8 <SystemClock_Config+0xfc>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <SystemClock_Config+0xfc>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <SystemClock_Config+0x100>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a2a      	ldr	r2, [pc, #168]	; (8000fdc <SystemClock_Config+0x100>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <SystemClock_Config+0x100>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f46:	2301      	movs	r3, #1
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	2302      	movs	r3, #2
 8000f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f5a:	2308      	movs	r3, #8
 8000f5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f5e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f62:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 fa2b 	bl	80043cc <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f7c:	f000 f9b4 	bl	80012e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	2105      	movs	r1, #5
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fc8c 	bl	80048bc <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000faa:	f000 f99d 	bl	80012e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000fb2:	23c0      	movs	r3, #192	; 0xc0
 8000fb4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 fe64 	bl	8004c8c <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000fca:	f000 f98d 	bl	80012e8 <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3760      	adds	r7, #96	; 0x60
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_I2C1_Init+0x50>)
 8000fe6:	4a13      	ldr	r2, [pc, #76]	; (8001034 <MX_I2C1_Init+0x54>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_I2C1_Init+0x50>)
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <MX_I2C1_Init+0x58>)
 8000fee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_I2C1_Init+0x50>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_I2C1_Init+0x50>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_I2C1_Init+0x50>)
 8000ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001002:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MX_I2C1_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_I2C1_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <MX_I2C1_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_I2C1_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_I2C1_Init+0x50>)
 800101e:	f002 fbf1 	bl	8003804 <HAL_I2C_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001028:	f000 f95e 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000d8 	.word	0x200000d8
 8001034:	40005400 	.word	0x40005400
 8001038:	000186a0 	.word	0x000186a0

0800103c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_I2S3_Init+0x54>)
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <MX_I2S3_Init+0x58>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_I2S3_Init+0x54>)
 8001048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800104c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_I2S3_Init+0x54>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_I2S3_Init+0x54>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <MX_I2S3_Init+0x54>)
 800105c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001060:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_I2S3_Init+0x54>)
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <MX_I2S3_Init+0x5c>)
 8001066:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_I2S3_Init+0x54>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_I2S3_Init+0x54>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_I2S3_Init+0x54>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_I2S3_Init+0x54>)
 800107c:	f002 fd06 	bl	8003a8c <HAL_I2S_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001086:	f000 f92f 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200001a8 	.word	0x200001a8
 8001094:	40003c00 	.word	0x40003c00
 8001098:	00017700 	.word	0x00017700

0800109c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_SPI1_Init+0x64>)
 80010a2:	4a18      	ldr	r2, [pc, #96]	; (8001104 <MX_SPI1_Init+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_SPI1_Init+0x64>)
 80010a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_SPI1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_SPI1_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_SPI1_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_SPI1_Init+0x64>)
 80010c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_SPI1_Init+0x64>)
 80010d0:	2230      	movs	r2, #48	; 0x30
 80010d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_SPI1_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <MX_SPI1_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_SPI1_Init+0x64>)
 80010e8:	220a      	movs	r2, #10
 80010ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_SPI1_Init+0x64>)
 80010ee:	f003 ff0d 	bl	8004f0c <HAL_SPI_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010f8:	f000 f8f6 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000150 	.word	0x20000150
 8001104:	40013000 	.word	0x40013000

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
 8001122:	4b6b      	ldr	r3, [pc, #428]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a6a      	ldr	r2, [pc, #424]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 8001128:	f043 0310 	orr.w	r3, r3, #16
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a63      	ldr	r2, [pc, #396]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b61      	ldr	r3, [pc, #388]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a5c      	ldr	r2, [pc, #368]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b5a      	ldr	r3, [pc, #360]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b56      	ldr	r3, [pc, #344]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a55      	ldr	r2, [pc, #340]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b4f      	ldr	r3, [pc, #316]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a47      	ldr	r2, [pc, #284]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b45      	ldr	r3, [pc, #276]	; (80012d0 <MX_GPIO_Init+0x1c8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2108      	movs	r1, #8
 80011ca:	4842      	ldr	r0, [pc, #264]	; (80012d4 <MX_GPIO_Init+0x1cc>)
 80011cc:	f000 fd9c 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2101      	movs	r1, #1
 80011d4:	4840      	ldr	r0, [pc, #256]	; (80012d8 <MX_GPIO_Init+0x1d0>)
 80011d6:	f000 fd97 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011da:	2200      	movs	r2, #0
 80011dc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80011e0:	483e      	ldr	r0, [pc, #248]	; (80012dc <MX_GPIO_Init+0x1d4>)
 80011e2:	f000 fd91 	bl	8001d08 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ACC_CS_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin;
 80011e6:	2308      	movs	r3, #8
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4835      	ldr	r0, [pc, #212]	; (80012d4 <MX_GPIO_Init+0x1cc>)
 80011fe:	f000 fbe7 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001202:	2301      	movs	r3, #1
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	482f      	ldr	r0, [pc, #188]	; (80012d8 <MX_GPIO_Init+0x1d0>)
 800121a:	f000 fbd9 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800121e:	2308      	movs	r3, #8
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800122e:	2305      	movs	r3, #5
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	4827      	ldr	r0, [pc, #156]	; (80012d8 <MX_GPIO_Init+0x1d0>)
 800123a:	f000 fbc9 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800123e:	2304      	movs	r3, #4
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	4823      	ldr	r0, [pc, #140]	; (80012e0 <MX_GPIO_Init+0x1d8>)
 8001252:	f000 fbbd 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001268:	2305      	movs	r3, #5
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	481b      	ldr	r0, [pc, #108]	; (80012e0 <MX_GPIO_Init+0x1d8>)
 8001274:	f000 fbac 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001278:	f24f 0310 	movw	r3, #61456	; 0xf010
 800127c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4812      	ldr	r0, [pc, #72]	; (80012dc <MX_GPIO_Init+0x1d4>)
 8001292:	f000 fb9d 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001296:	2320      	movs	r3, #32
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <MX_GPIO_Init+0x1d4>)
 80012aa:	f000 fb91 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_INT_1_Pin ACC_INT_2_Pin */
  GPIO_InitStruct.Pin = ACC_INT_1_Pin|ACC_INT_2_Pin;
 80012ae:	2303      	movs	r3, #3
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_GPIO_Init+0x1dc>)
 80012b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_GPIO_Init+0x1cc>)
 80012c2:	f000 fb85 	bl	80019d0 <HAL_GPIO_Init>

}
 80012c6:	bf00      	nop
 80012c8:	3730      	adds	r7, #48	; 0x30
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40020400 	.word	0x40020400
 80012e4:	10110000 	.word	0x10110000

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0x8>
	...

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <HAL_MspInit+0x4c>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_MspInit+0x4c>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001332:	2007      	movs	r0, #7
 8001334:	f000 fb0a 	bl	800194c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800

08001344 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <HAL_I2C_MspInit+0x84>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12c      	bne.n	80013c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_I2C_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <HAL_I2C_MspInit+0x88>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_I2C_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001382:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001388:	2312      	movs	r3, #18
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138c:	2301      	movs	r3, #1
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001394:	2304      	movs	r3, #4
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	480c      	ldr	r0, [pc, #48]	; (80013d0 <HAL_I2C_MspInit+0x8c>)
 80013a0:	f000 fb16 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_I2C_MspInit+0x88>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_I2C_MspInit+0x88>)
 80013ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b2:	6413      	str	r3, [r2, #64]	; 0x40
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_I2C_MspInit+0x88>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	; 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40005400 	.word	0x40005400
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020400 	.word	0x40020400

080013d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a28      	ldr	r2, [pc, #160]	; (8001494 <HAL_I2S_MspInit+0xc0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d14a      	bne.n	800148c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_I2S_MspInit+0xc4>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a26      	ldr	r2, [pc, #152]	; (8001498 <HAL_I2S_MspInit+0xc4>)
 8001400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_I2S_MspInit+0xc4>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_I2S_MspInit+0xc4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <HAL_I2S_MspInit+0xc4>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_I2S_MspInit+0xc4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_I2S_MspInit+0xc4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <HAL_I2S_MspInit+0xc4>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_I2S_MspInit+0xc4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800144a:	2310      	movs	r3, #16
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800145a:	2306      	movs	r3, #6
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	480d      	ldr	r0, [pc, #52]	; (800149c <HAL_I2S_MspInit+0xc8>)
 8001466:	f000 fab3 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800146a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800147c:	2306      	movs	r3, #6
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <HAL_I2S_MspInit+0xcc>)
 8001488:	f000 faa2 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	; 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40003c00 	.word	0x40003c00
 8001498:	40023800 	.word	0x40023800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020800 	.word	0x40020800

080014a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <HAL_SPI_MspInit+0x84>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d12b      	bne.n	800151e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_SPI_MspInit+0x88>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_SPI_MspInit+0x88>)
 80014d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_SPI_MspInit+0x88>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_SPI_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <HAL_SPI_MspInit+0x88>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_SPI_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014fe:	23e0      	movs	r3, #224	; 0xe0
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800150e:	2305      	movs	r3, #5
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <HAL_SPI_MspInit+0x8c>)
 800151a:	f000 fa59 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40013000 	.word	0x40013000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001580:	f000 f8d0 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <OTG_FS_IRQHandler+0x10>)
 800158e:	f000 fe3f 	bl	8002210 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200005cc 	.word	0x200005cc

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f007 fbbc 	bl	8008d48 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20020000 	.word	0x20020000
 80015fc:	00000400 	.word	0x00000400
 8001600:	200000b0 	.word	0x200000b0
 8001604:	200008e0 	.word	0x200008e0

08001608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001656:	f7ff ffd7 	bl	8001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f007 fb7b 	bl	8008d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7ff fba5 	bl	8000dac <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001670:	08008fa0 	.word	0x08008fa0
  ldr r2, =_sbss
 8001674:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001678:	200008e0 	.word	0x200008e0

0800167c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>
	...

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <HAL_Init+0x40>)
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_Init+0x40>)
 8001696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_Init+0x40>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f94f 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 f808 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff fe1e 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023c00 	.word	0x40023c00

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f967 	bl	80019b6 <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 f92f 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000000 	.word	0x20000000
 800171c:	20000008 	.word	0x20000008
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000008 	.word	0x20000008
 8001748:	200001f0 	.word	0x200001f0

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	200001f0 	.word	0x200001f0

08001764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff ffee 	bl	800174c <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800178a:	bf00      	nop
 800178c:	f7ff ffde 	bl	800174c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
  {
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff29 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff3e 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff31 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffa2 	bl	8001908 <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e16b      	b.n	8001cc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f040 815a 	bne.w	8001cbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d005      	beq.n	8001a22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d130      	bne.n	8001a84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 0201 	and.w	r2, r3, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d017      	beq.n	8001ac0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d123      	bne.n	8001b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80b4 	beq.w	8001cbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b60      	ldr	r3, [pc, #384]	; (8001cdc <HAL_GPIO_Init+0x30c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a5f      	ldr	r2, [pc, #380]	; (8001cdc <HAL_GPIO_Init+0x30c>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b5d      	ldr	r3, [pc, #372]	; (8001cdc <HAL_GPIO_Init+0x30c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b72:	4a5b      	ldr	r2, [pc, #364]	; (8001ce0 <HAL_GPIO_Init+0x310>)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a52      	ldr	r2, [pc, #328]	; (8001ce4 <HAL_GPIO_Init+0x314>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d02b      	beq.n	8001bf6 <HAL_GPIO_Init+0x226>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_GPIO_Init+0x318>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d025      	beq.n	8001bf2 <HAL_GPIO_Init+0x222>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a50      	ldr	r2, [pc, #320]	; (8001cec <HAL_GPIO_Init+0x31c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <HAL_GPIO_Init+0x21e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4f      	ldr	r2, [pc, #316]	; (8001cf0 <HAL_GPIO_Init+0x320>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x21a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4e      	ldr	r2, [pc, #312]	; (8001cf4 <HAL_GPIO_Init+0x324>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x216>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4d      	ldr	r2, [pc, #308]	; (8001cf8 <HAL_GPIO_Init+0x328>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x212>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4c      	ldr	r2, [pc, #304]	; (8001cfc <HAL_GPIO_Init+0x32c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x20e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4b      	ldr	r2, [pc, #300]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x20a>
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	e00e      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bda:	2308      	movs	r3, #8
 8001bdc:	e00c      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bde:	2306      	movs	r3, #6
 8001be0:	e00a      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001be2:	2305      	movs	r3, #5
 8001be4:	e008      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e004      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	f002 0203 	and.w	r2, r2, #3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4093      	lsls	r3, r2
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c08:	4935      	ldr	r1, [pc, #212]	; (8001ce0 <HAL_GPIO_Init+0x310>)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c16:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c3a:	4a32      	ldr	r2, [pc, #200]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c40:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8e:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	f67f ae90 	bls.w	80019ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40021400 	.word	0x40021400
 8001cfc:	40021800 	.word	0x40021800
 8001d00:	40021c00 	.word	0x40021c00
 8001d04:	40013c00 	.word	0x40013c00

08001d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
 8001d14:	4613      	mov	r3, r2
 8001d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d24:	e003      	b.n	8001d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	041a      	lsls	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	619a      	str	r2, [r3, #24]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3c:	b08f      	sub	sp, #60	; 0x3c
 8001d3e:	af0a      	add	r7, sp, #40	; 0x28
 8001d40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e054      	b.n	8001df6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f006 fd44 	bl	80087f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2203      	movs	r2, #3
 8001d70:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 fee6 	bl	8005b5c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	687e      	ldr	r6, [r7, #4]
 8001d98:	466d      	mov	r5, sp
 8001d9a:	f106 0410 	add.w	r4, r6, #16
 8001d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001daa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dae:	1d33      	adds	r3, r6, #4
 8001db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db2:	6838      	ldr	r0, [r7, #0]
 8001db4:	f003 fe60 	bl	8005a78 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 fedd 	bl	8005b7e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	687e      	ldr	r6, [r7, #4]
 8001dcc:	466d      	mov	r5, sp
 8001dce:	f106 0410 	add.w	r4, r6, #16
 8001dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dde:	e885 0003 	stmia.w	r5, {r0, r1}
 8001de2:	1d33      	adds	r3, r6, #4
 8001de4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de6:	6838      	ldr	r0, [r7, #0]
 8001de8:	f003 fff0 	bl	8005dcc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dfe <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001dfe:	b590      	push	{r4, r7, lr}
 8001e00:	b089      	sub	sp, #36	; 0x24
 8001e02:	af04      	add	r7, sp, #16
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	4608      	mov	r0, r1
 8001e08:	4611      	mov	r1, r2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	70fb      	strb	r3, [r7, #3]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70bb      	strb	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_HCD_HC_Init+0x28>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e076      	b.n	8001f14 <HAL_HCD_HC_Init+0x116>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	212c      	movs	r1, #44	; 0x2c
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	333d      	adds	r3, #61	; 0x3d
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	212c      	movs	r1, #44	; 0x2c
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3338      	adds	r3, #56	; 0x38
 8001e4e:	787a      	ldrb	r2, [r7, #1]
 8001e50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	212c      	movs	r1, #44	; 0x2c
 8001e58:	fb01 f303 	mul.w	r3, r1, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3340      	adds	r3, #64	; 0x40
 8001e60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e62:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3339      	adds	r3, #57	; 0x39
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	333f      	adds	r3, #63	; 0x3f
 8001e84:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	78ba      	ldrb	r2, [r7, #2]
 8001e8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e92:	b2d0      	uxtb	r0, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	333a      	adds	r3, #58	; 0x3a
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ea4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	da09      	bge.n	8001ec0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	212c      	movs	r1, #44	; 0x2c
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	333b      	adds	r3, #59	; 0x3b
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	e008      	b.n	8001ed2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	212c      	movs	r1, #44	; 0x2c
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	333b      	adds	r3, #59	; 0x3b
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	333c      	adds	r3, #60	; 0x3c
 8001ee0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ee4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	787c      	ldrb	r4, [r7, #1]
 8001eec:	78ba      	ldrb	r2, [r7, #2]
 8001eee:	78f9      	ldrb	r1, [r7, #3]
 8001ef0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	4623      	mov	r3, r4
 8001f02:	f004 f8e5 	bl	80060d0 <USB_HC_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd90      	pop	{r4, r7, pc}

08001f1c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_HCD_HC_Halt+0x1e>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e00f      	b.n	8001f5a <HAL_HCD_HC_Halt+0x3e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f004 fb21 	bl	8006592 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	4608      	mov	r0, r1
 8001f6e:	4611      	mov	r1, r2
 8001f70:	461a      	mov	r2, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	70fb      	strb	r3, [r7, #3]
 8001f76:	460b      	mov	r3, r1
 8001f78:	70bb      	strb	r3, [r7, #2]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	333b      	adds	r3, #59	; 0x3b
 8001f8c:	78ba      	ldrb	r2, [r7, #2]
 8001f8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	333f      	adds	r3, #63	; 0x3f
 8001f9e:	787a      	ldrb	r2, [r7, #1]
 8001fa0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001fa2:	7c3b      	ldrb	r3, [r7, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d112      	bne.n	8001fce <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	212c      	movs	r1, #44	; 0x2c
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3342      	adds	r3, #66	; 0x42
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	212c      	movs	r1, #44	; 0x2c
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	333d      	adds	r3, #61	; 0x3d
 8001fc8:	7f3a      	ldrb	r2, [r7, #28]
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	e008      	b.n	8001fe0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	212c      	movs	r1, #44	; 0x2c
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	3342      	adds	r3, #66	; 0x42
 8001fdc:	2202      	movs	r2, #2
 8001fde:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	f200 80c6 	bhi.w	8002174 <HAL_HCD_HC_SubmitRequest+0x210>
 8001fe8:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	08002001 	.word	0x08002001
 8001ff4:	08002161 	.word	0x08002161
 8001ff8:	08002065 	.word	0x08002065
 8001ffc:	080020e3 	.word	0x080020e3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002000:	7c3b      	ldrb	r3, [r7, #16]
 8002002:	2b01      	cmp	r3, #1
 8002004:	f040 80b8 	bne.w	8002178 <HAL_HCD_HC_SubmitRequest+0x214>
 8002008:	78bb      	ldrb	r3, [r7, #2]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 80b4 	bne.w	8002178 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002010:	8b3b      	ldrh	r3, [r7, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d108      	bne.n	8002028 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	3355      	adds	r3, #85	; 0x55
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3355      	adds	r3, #85	; 0x55
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	3342      	adds	r3, #66	; 0x42
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800204e:	e093      	b.n	8002178 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	212c      	movs	r1, #44	; 0x2c
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	3342      	adds	r3, #66	; 0x42
 800205e:	2202      	movs	r2, #2
 8002060:	701a      	strb	r2, [r3, #0]
      break;
 8002062:	e089      	b.n	8002178 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002064:	78bb      	ldrb	r3, [r7, #2]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11d      	bne.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	3355      	adds	r3, #85	; 0x55
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	3342      	adds	r3, #66	; 0x42
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002090:	e073      	b.n	800217a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3342      	adds	r3, #66	; 0x42
 80020a0:	2202      	movs	r2, #2
 80020a2:	701a      	strb	r2, [r3, #0]
      break;
 80020a4:	e069      	b.n	800217a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	3354      	adds	r3, #84	; 0x54
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	3342      	adds	r3, #66	; 0x42
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
      break;
 80020cc:	e055      	b.n	800217a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3342      	adds	r3, #66	; 0x42
 80020dc:	2202      	movs	r2, #2
 80020de:	701a      	strb	r2, [r3, #0]
      break;
 80020e0:	e04b      	b.n	800217a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020e2:	78bb      	ldrb	r3, [r7, #2]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d11d      	bne.n	8002124 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3355      	adds	r3, #85	; 0x55
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3342      	adds	r3, #66	; 0x42
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800210e:	e034      	b.n	800217a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3342      	adds	r3, #66	; 0x42
 800211e:	2202      	movs	r2, #2
 8002120:	701a      	strb	r2, [r3, #0]
      break;
 8002122:	e02a      	b.n	800217a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3354      	adds	r3, #84	; 0x54
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	3342      	adds	r3, #66	; 0x42
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
      break;
 800214a:	e016      	b.n	800217a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3342      	adds	r3, #66	; 0x42
 800215a:	2202      	movs	r2, #2
 800215c:	701a      	strb	r2, [r3, #0]
      break;
 800215e:	e00c      	b.n	800217a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3342      	adds	r3, #66	; 0x42
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
      break;
 8002172:	e002      	b.n	800217a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002174:	bf00      	nop
 8002176:	e000      	b.n	800217a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002178:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3344      	adds	r3, #68	; 0x44
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	8b3a      	ldrh	r2, [r7, #24]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	202c      	movs	r0, #44	; 0x2c
 8002194:	fb00 f303 	mul.w	r3, r0, r3
 8002198:	440b      	add	r3, r1
 800219a:	334c      	adds	r3, #76	; 0x4c
 800219c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3360      	adds	r3, #96	; 0x60
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	212c      	movs	r1, #44	; 0x2c
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	3350      	adds	r3, #80	; 0x50
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	3339      	adds	r3, #57	; 0x39
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3361      	adds	r3, #97	; 0x61
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	222c      	movs	r2, #44	; 0x2c
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	3338      	adds	r3, #56	; 0x38
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	18d1      	adds	r1, r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	f004 f874 	bl	80062ec <USB_HC_StartXfer>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop

08002210 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f003 fd8d 	bl	8005d46 <USB_GetMode>
 800222c:	4603      	mov	r3, r0
 800222e:	2b01      	cmp	r3, #1
 8002230:	f040 80ef 	bne.w	8002412 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f003 fd71 	bl	8005d20 <USB_ReadInterrupts>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80e5 	beq.w	8002410 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fd68 	bl	8005d20 <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800225a:	d104      	bne.n	8002266 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002264:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f003 fd58 	bl	8005d20 <USB_ReadInterrupts>
 8002270:	4603      	mov	r3, r0
 8002272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800227a:	d104      	bne.n	8002286 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002284:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f003 fd48 	bl	8005d20 <USB_ReadInterrupts>
 8002290:	4603      	mov	r3, r0
 8002292:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800229a:	d104      	bne.n	80022a6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f003 fd38 	bl	8005d20 <USB_ReadInterrupts>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d103      	bne.n	80022c2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2202      	movs	r2, #2
 80022c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 fd2a 	bl	8005d20 <USB_ReadInterrupts>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022d6:	d115      	bne.n	8002304 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022e0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d108      	bne.n	8002304 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f006 fafc 	bl	80088f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	4618      	mov	r0, r3
 8002300:	f003 fe20 	bl	8005f44 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f003 fd09 	bl	8005d20 <USB_ReadInterrupts>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002318:	d102      	bne.n	8002320 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f001 f9ff 	bl	800371e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f003 fcfb 	bl	8005d20 <USB_ReadInterrupts>
 800232a:	4603      	mov	r3, r0
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b08      	cmp	r3, #8
 8002332:	d106      	bne.n	8002342 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f006 fabf 	bl	80088b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2208      	movs	r2, #8
 8002340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f003 fcea 	bl	8005d20 <USB_ReadInterrupts>
 800234c:	4603      	mov	r3, r0
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b10      	cmp	r3, #16
 8002354:	d101      	bne.n	800235a <HAL_HCD_IRQHandler+0x14a>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_HCD_IRQHandler+0x14c>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d012      	beq.n	8002386 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0210 	bic.w	r2, r2, #16
 800236e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f001 f902 	bl	800357a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0210 	orr.w	r2, r2, #16
 8002384:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f003 fcc8 	bl	8005d20 <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800239a:	d13a      	bne.n	8002412 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 f8e5 	bl	8006570 <USB_HC_ReadInterrupt>
 80023a6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	e025      	b.n	80023fa <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d018      	beq.n	80023f4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023d8:	d106      	bne.n	80023e8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f8ab 	bl	800253c <HCD_HC_IN_IRQHandler>
 80023e6:	e005      	b.n	80023f4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fcc6 	bl	8002d80 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	d3d4      	bcc.n	80023ae <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800240c:	615a      	str	r2, [r3, #20]
 800240e:	e000      	b.n	8002412 <HAL_HCD_IRQHandler+0x202>
      return;
 8002410:	bf00      	nop
    }
  }
}
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_HCD_Start+0x16>
 800242a:	2302      	movs	r3, #2
 800242c:	e013      	b.n	8002456 <HAL_HCD_Start+0x3e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f003 fb7d 	bl	8005b3a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2101      	movs	r1, #1
 8002446:	4618      	mov	r0, r3
 8002448:	f003 fde0 	bl	800600c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_HCD_Stop+0x16>
 8002470:	2302      	movs	r3, #2
 8002472:	e00d      	b.n	8002490 <HAL_HCD_Stop+0x32>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f004 f9df 	bl	8006844 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f003 fd87 	bl	8005fb8 <USB_ResetPort>
 80024aa:	4603      	mov	r3, r0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3360      	adds	r3, #96	; 0x60
 80024ce:	781b      	ldrb	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3350      	adds	r3, #80	; 0x50
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f003 fdcb 	bl	80060ac <USB_GetCurrentFrame>
 8002516:	4603      	mov	r3, r0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f003 fda6 	bl	800607e <USB_GetHostSpeed>
 8002532:	4603      	mov	r3, r0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4413      	add	r3, r2
 800255e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b04      	cmp	r3, #4
 800256a:	d119      	bne.n	80025a0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	2304      	movs	r3, #4
 800257c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	0151      	lsls	r1, r2, #5
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	440a      	add	r2, r1
 8002594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	60d3      	str	r3, [r2, #12]
 800259e:	e101      	b.n	80027a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b6:	d12b      	bne.n	8002610 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	461a      	mov	r2, r3
 80025c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3361      	adds	r3, #97	; 0x61
 80025da:	2207      	movs	r2, #7
 80025dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	0151      	lsls	r1, r2, #5
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	440a      	add	r2, r1
 80025f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f003 ffc2 	bl	8006592 <USB_HC_Halt>
 800260e:	e0c9      	b.n	80027a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b20      	cmp	r3, #32
 8002624:	d109      	bne.n	800263a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	461a      	mov	r2, r3
 8002634:	2320      	movs	r3, #32
 8002636:	6093      	str	r3, [r2, #8]
 8002638:	e0b4      	b.n	80027a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b08      	cmp	r3, #8
 800264e:	d133      	bne.n	80026b8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	0151      	lsls	r1, r2, #5
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	440a      	add	r2, r1
 8002666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800266a:	f043 0302 	orr.w	r3, r3, #2
 800266e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	3361      	adds	r3, #97	; 0x61
 800267e:	2205      	movs	r2, #5
 8002680:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	461a      	mov	r2, r3
 8002690:	2310      	movs	r3, #16
 8002692:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	461a      	mov	r2, r3
 80026a2:	2308      	movs	r3, #8
 80026a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 ff6e 	bl	8006592 <USB_HC_Halt>
 80026b6:	e075      	b.n	80027a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ce:	d134      	bne.n	800273a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	0151      	lsls	r1, r2, #5
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	440a      	add	r2, r1
 80026e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ea:	f043 0302 	orr.w	r3, r3, #2
 80026ee:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3361      	adds	r3, #97	; 0x61
 80026fe:	2208      	movs	r2, #8
 8002700:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	461a      	mov	r2, r3
 8002710:	2310      	movs	r3, #16
 8002712:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002726:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f003 ff2d 	bl	8006592 <USB_HC_Halt>
 8002738:	e034      	b.n	80027a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d129      	bne.n	80027a4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	0151      	lsls	r1, r2, #5
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	440a      	add	r2, r1
 8002766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800276a:	f043 0302 	orr.w	r3, r3, #2
 800276e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3361      	adds	r3, #97	; 0x61
 800277e:	2206      	movs	r2, #6
 8002780:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f003 ff00 	bl	8006592 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	461a      	mov	r2, r3
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ba:	d122      	bne.n	8002802 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	0151      	lsls	r1, r2, #5
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	440a      	add	r2, r1
 80027d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d6:	f043 0302 	orr.w	r3, r3, #2
 80027da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 fed3 	bl	8006592 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	461a      	mov	r2, r3
 80027fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002800:	e2ba      	b.n	8002d78 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4413      	add	r3, r2
 800280a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	f040 811b 	bne.w	8002a50 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d019      	beq.n	8002856 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3348      	adds	r3, #72	; 0x48
 8002830:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	0159      	lsls	r1, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	440b      	add	r3, r1
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002844:	1ad2      	subs	r2, r2, r3
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	202c      	movs	r0, #44	; 0x2c
 800284c:	fb00 f303 	mul.w	r3, r0, r3
 8002850:	440b      	add	r3, r1
 8002852:	3350      	adds	r3, #80	; 0x50
 8002854:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	3361      	adds	r3, #97	; 0x61
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	335c      	adds	r3, #92	; 0x5c
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	461a      	mov	r2, r3
 8002888:	2301      	movs	r3, #1
 800288a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	333f      	adds	r3, #63	; 0x3f
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	333f      	adds	r3, #63	; 0x3f
 80028ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d121      	bne.n	80028f8 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	0151      	lsls	r1, r2, #5
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	440a      	add	r2, r1
 80028ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 fe57 	bl	8006592 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	461a      	mov	r2, r3
 80028f2:	2310      	movs	r3, #16
 80028f4:	6093      	str	r3, [r2, #8]
 80028f6:	e066      	b.n	80029c6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	333f      	adds	r3, #63	; 0x3f
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d127      	bne.n	800295c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	0151      	lsls	r1, r2, #5
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	440a      	add	r2, r1
 8002922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800292a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3360      	adds	r3, #96	; 0x60
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	b2d9      	uxtb	r1, r3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	202c      	movs	r0, #44	; 0x2c
 8002948:	fb00 f303 	mul.w	r3, r0, r3
 800294c:	4413      	add	r3, r2
 800294e:	3360      	adds	r3, #96	; 0x60
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f005 ffd9 	bl	800890c <HAL_HCD_HC_NotifyURBChange_Callback>
 800295a:	e034      	b.n	80029c6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	333f      	adds	r3, #63	; 0x3f
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d12a      	bne.n	80029c6 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3360      	adds	r3, #96	; 0x60
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3354      	adds	r3, #84	; 0x54
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	f083 0301 	eor.w	r3, r3, #1
 8002996:	b2d8      	uxtb	r0, r3
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3354      	adds	r3, #84	; 0x54
 80029a6:	4602      	mov	r2, r0
 80029a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	b2d9      	uxtb	r1, r3
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	202c      	movs	r0, #44	; 0x2c
 80029b4:	fb00 f303 	mul.w	r3, r0, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3360      	adds	r3, #96	; 0x60
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f005 ffa3 	bl	800890c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d12b      	bne.n	8002a26 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3348      	adds	r3, #72	; 0x48
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	202c      	movs	r0, #44	; 0x2c
 80029e4:	fb00 f202 	mul.w	r2, r0, r2
 80029e8:	440a      	add	r2, r1
 80029ea:	3240      	adds	r2, #64	; 0x40
 80029ec:	8812      	ldrh	r2, [r2, #0]
 80029ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 81be 	beq.w	8002d78 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3354      	adds	r3, #84	; 0x54
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	f083 0301 	eor.w	r3, r3, #1
 8002a10:	b2d8      	uxtb	r0, r3
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3354      	adds	r3, #84	; 0x54
 8002a20:	4602      	mov	r2, r0
 8002a22:	701a      	strb	r2, [r3, #0]
}
 8002a24:	e1a8      	b.n	8002d78 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3354      	adds	r3, #84	; 0x54
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	f083 0301 	eor.w	r3, r3, #1
 8002a3a:	b2d8      	uxtb	r0, r3
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3354      	adds	r3, #84	; 0x54
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	701a      	strb	r2, [r3, #0]
}
 8002a4e:	e193      	b.n	8002d78 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	f040 8106 	bne.w	8002c74 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	0151      	lsls	r1, r2, #5
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a82:	f023 0302 	bic.w	r3, r3, #2
 8002a86:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d109      	bne.n	8002ab0 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3360      	adds	r3, #96	; 0x60
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e0c9      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3361      	adds	r3, #97	; 0x61
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d109      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3360      	adds	r3, #96	; 0x60
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e0b5      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3361      	adds	r3, #97	; 0x61
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b06      	cmp	r3, #6
 8002aea:	d009      	beq.n	8002b00 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3361      	adds	r3, #97	; 0x61
 8002afa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d150      	bne.n	8002ba2 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	335c      	adds	r3, #92	; 0x5c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	202c      	movs	r0, #44	; 0x2c
 8002b18:	fb00 f303 	mul.w	r3, r0, r3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	335c      	adds	r3, #92	; 0x5c
 8002b20:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	335c      	adds	r3, #92	; 0x5c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d912      	bls.n	8002b5c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	335c      	adds	r3, #92	; 0x5c
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3360      	adds	r3, #96	; 0x60
 8002b56:	2204      	movs	r2, #4
 8002b58:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b5a:	e073      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3360      	adds	r3, #96	; 0x60
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b84:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b8c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ba0:	e050      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3361      	adds	r3, #97	; 0x61
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d122      	bne.n	8002bfc <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3360      	adds	r3, #96	; 0x60
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bde:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002be6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e023      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3361      	adds	r3, #97	; 0x61
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b07      	cmp	r3, #7
 8002c0e:	d119      	bne.n	8002c44 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	335c      	adds	r3, #92	; 0x5c
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	202c      	movs	r0, #44	; 0x2c
 8002c28:	fb00 f303 	mul.w	r3, r0, r3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	335c      	adds	r3, #92	; 0x5c
 8002c30:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3360      	adds	r3, #96	; 0x60
 8002c40:	2204      	movs	r2, #4
 8002c42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	461a      	mov	r2, r3
 8002c52:	2302      	movs	r3, #2
 8002c54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	b2d9      	uxtb	r1, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	202c      	movs	r0, #44	; 0x2c
 8002c60:	fb00 f303 	mul.w	r3, r0, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3360      	adds	r3, #96	; 0x60
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f005 fe4d 	bl	800890c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c72:	e081      	b.n	8002d78 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	d176      	bne.n	8002d78 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	333f      	adds	r3, #63	; 0x3f
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d121      	bne.n	8002ce2 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	335c      	adds	r3, #92	; 0x5c
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	0151      	lsls	r1, r2, #5
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	440a      	add	r2, r1
 8002cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cca:	f043 0302 	orr.w	r3, r3, #2
 8002cce:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 fc59 	bl	8006592 <USB_HC_Halt>
 8002ce0:	e041      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	333f      	adds	r3, #63	; 0x3f
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	333f      	adds	r3, #63	; 0x3f
 8002d04:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d12d      	bne.n	8002d66 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	335c      	adds	r3, #92	; 0x5c
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d120      	bne.n	8002d66 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3361      	adds	r3, #97	; 0x61
 8002d32:	2203      	movs	r2, #3
 8002d34:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	0151      	lsls	r1, r2, #5
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	440a      	add	r2, r1
 8002d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d50:	f043 0302 	orr.w	r3, r3, #2
 8002d54:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 fc16 	bl	8006592 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	461a      	mov	r2, r3
 8002d74:	2310      	movs	r3, #16
 8002d76:	6093      	str	r3, [r2, #8]
}
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d119      	bne.n	8002de4 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	0151      	lsls	r1, r2, #5
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	440a      	add	r2, r1
 8002dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002de2:	e3c6      	b.n	8003572 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d13e      	bne.n	8002e78 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e06:	461a      	mov	r2, r3
 8002e08:	2320      	movs	r3, #32
 8002e0a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	333d      	adds	r3, #61	; 0x3d
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	f040 83a8 	bne.w	8003572 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	333d      	adds	r3, #61	; 0x3d
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3360      	adds	r3, #96	; 0x60
 8002e42:	2202      	movs	r2, #2
 8002e44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	0151      	lsls	r1, r2, #5
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	440a      	add	r2, r1
 8002e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 fb8e 	bl	8006592 <USB_HC_Halt>
}
 8002e76:	e37c      	b.n	8003572 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e8e:	d122      	bne.n	8002ed6 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	0151      	lsls	r1, r2, #5
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	440a      	add	r2, r1
 8002ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eaa:	f043 0302 	orr.w	r3, r3, #2
 8002eae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 fb69 	bl	8006592 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ed2:	6093      	str	r3, [r2, #8]
}
 8002ed4:	e34d      	b.n	8003572 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d150      	bne.n	8002f8e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	335c      	adds	r3, #92	; 0x5c
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d111      	bne.n	8002f38 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	333d      	adds	r3, #61	; 0x3d
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	461a      	mov	r2, r3
 8002f34:	2340      	movs	r3, #64	; 0x40
 8002f36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	0151      	lsls	r1, r2, #5
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	440a      	add	r2, r1
 8002f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f52:	f043 0302 	orr.w	r3, r3, #2
 8002f56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 fb15 	bl	8006592 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	461a      	mov	r2, r3
 8002f76:	2301      	movs	r3, #1
 8002f78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	212c      	movs	r1, #44	; 0x2c
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	3361      	adds	r3, #97	; 0x61
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
}
 8002f8c:	e2f1      	b.n	8003572 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa0:	2b40      	cmp	r3, #64	; 0x40
 8002fa2:	d13c      	bne.n	800301e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	3361      	adds	r3, #97	; 0x61
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	333d      	adds	r3, #61	; 0x3d
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	335c      	adds	r3, #92	; 0x5c
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	0151      	lsls	r1, r2, #5
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	440a      	add	r2, r1
 8002ff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ff4:	f043 0302 	orr.w	r3, r3, #2
 8002ff8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f003 fac4 	bl	8006592 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	4413      	add	r3, r2
 8003012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003016:	461a      	mov	r2, r3
 8003018:	2340      	movs	r3, #64	; 0x40
 800301a:	6093      	str	r3, [r2, #8]
}
 800301c:	e2a9      	b.n	8003572 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b08      	cmp	r3, #8
 8003032:	d12a      	bne.n	800308a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	2308      	movs	r3, #8
 8003044:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4413      	add	r3, r2
 800304e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	0151      	lsls	r1, r2, #5
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	440a      	add	r2, r1
 800305c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f003 fa8e 	bl	8006592 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3361      	adds	r3, #97	; 0x61
 8003084:	2205      	movs	r2, #5
 8003086:	701a      	strb	r2, [r3, #0]
}
 8003088:	e273      	b.n	8003572 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b10      	cmp	r3, #16
 800309e:	d150      	bne.n	8003142 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	212c      	movs	r1, #44	; 0x2c
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	335c      	adds	r3, #92	; 0x5c
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	3361      	adds	r3, #97	; 0x61
 80030c0:	2203      	movs	r2, #3
 80030c2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	333d      	adds	r3, #61	; 0x3d
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d112      	bne.n	80030fe <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	333c      	adds	r3, #60	; 0x3c
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d108      	bne.n	80030fe <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	333d      	adds	r3, #61	; 0x3d
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	0151      	lsls	r1, r2, #5
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	440a      	add	r2, r1
 8003114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f003 fa32 	bl	8006592 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	461a      	mov	r2, r3
 800313c:	2310      	movs	r3, #16
 800313e:	6093      	str	r3, [r2, #8]
}
 8003140:	e217      	b.n	8003572 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b80      	cmp	r3, #128	; 0x80
 8003156:	d174      	bne.n	8003242 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d121      	bne.n	80031a4 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	212c      	movs	r1, #44	; 0x2c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	3361      	adds	r3, #97	; 0x61
 800316e:	2206      	movs	r2, #6
 8003170:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	4413      	add	r3, r2
 800317a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	0151      	lsls	r1, r2, #5
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	440a      	add	r2, r1
 8003188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f003 f9f8 	bl	8006592 <USB_HC_Halt>
 80031a2:	e044      	b.n	800322e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	335c      	adds	r3, #92	; 0x5c
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	202c      	movs	r0, #44	; 0x2c
 80031bc:	fb00 f303 	mul.w	r3, r0, r3
 80031c0:	440b      	add	r3, r1
 80031c2:	335c      	adds	r3, #92	; 0x5c
 80031c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	212c      	movs	r1, #44	; 0x2c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	335c      	adds	r3, #92	; 0x5c
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d920      	bls.n	800321c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	335c      	adds	r3, #92	; 0x5c
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3360      	adds	r3, #96	; 0x60
 80031fa:	2204      	movs	r2, #4
 80031fc:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	b2d9      	uxtb	r1, r3
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	202c      	movs	r0, #44	; 0x2c
 8003208:	fb00 f303 	mul.w	r3, r0, r3
 800320c:	4413      	add	r3, r2
 800320e:	3360      	adds	r3, #96	; 0x60
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f005 fb79 	bl	800890c <HAL_HCD_HC_NotifyURBChange_Callback>
 800321a:	e008      	b.n	800322e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3360      	adds	r3, #96	; 0x60
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	4413      	add	r3, r2
 8003236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323a:	461a      	mov	r2, r3
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	6093      	str	r3, [r2, #8]
}
 8003240:	e197      	b.n	8003572 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4413      	add	r3, r2
 800324a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003258:	d134      	bne.n	80032c4 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	0151      	lsls	r1, r2, #5
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	440a      	add	r2, r1
 8003270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f003 f984 	bl	8006592 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003296:	461a      	mov	r2, r3
 8003298:	2310      	movs	r3, #16
 800329a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	461a      	mov	r2, r3
 80032aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3361      	adds	r3, #97	; 0x61
 80032be:	2208      	movs	r2, #8
 80032c0:	701a      	strb	r2, [r3, #0]
}
 80032c2:	e156      	b.n	8003572 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	f040 814b 	bne.w	8003572 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	0151      	lsls	r1, r2, #5
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	440a      	add	r2, r1
 80032f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032f6:	f023 0302 	bic.w	r3, r3, #2
 80032fa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3361      	adds	r3, #97	; 0x61
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d179      	bne.n	8003404 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	212c      	movs	r1, #44	; 0x2c
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	3360      	adds	r3, #96	; 0x60
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	212c      	movs	r1, #44	; 0x2c
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	4413      	add	r3, r2
 800332e:	333f      	adds	r3, #63	; 0x3f
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d00a      	beq.n	800334c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	333f      	adds	r3, #63	; 0x3f
 8003344:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003346:	2b03      	cmp	r3, #3
 8003348:	f040 80fc 	bne.w	8003544 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d142      	bne.n	80033da <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	334c      	adds	r3, #76	; 0x4c
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80ed 	beq.w	8003544 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	334c      	adds	r3, #76	; 0x4c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	202c      	movs	r0, #44	; 0x2c
 8003380:	fb00 f202 	mul.w	r2, r0, r2
 8003384:	440a      	add	r2, r1
 8003386:	3240      	adds	r2, #64	; 0x40
 8003388:	8812      	ldrh	r2, [r2, #0]
 800338a:	4413      	add	r3, r2
 800338c:	3b01      	subs	r3, #1
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	202c      	movs	r0, #44	; 0x2c
 8003394:	fb00 f202 	mul.w	r2, r0, r2
 8003398:	440a      	add	r2, r1
 800339a:	3240      	adds	r2, #64	; 0x40
 800339c:	8812      	ldrh	r2, [r2, #0]
 800339e:	fbb3 f3f2 	udiv	r3, r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80ca 	beq.w	8003544 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3355      	adds	r3, #85	; 0x55
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	f083 0301 	eor.w	r3, r3, #1
 80033c4:	b2d8      	uxtb	r0, r3
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	3355      	adds	r3, #85	; 0x55
 80033d4:	4602      	mov	r2, r0
 80033d6:	701a      	strb	r2, [r3, #0]
 80033d8:	e0b4      	b.n	8003544 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	212c      	movs	r1, #44	; 0x2c
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	3355      	adds	r3, #85	; 0x55
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	f083 0301 	eor.w	r3, r3, #1
 80033ee:	b2d8      	uxtb	r0, r3
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	3355      	adds	r3, #85	; 0x55
 80033fe:	4602      	mov	r2, r0
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e09f      	b.n	8003544 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	3361      	adds	r3, #97	; 0x61
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d109      	bne.n	800342c <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	3360      	adds	r3, #96	; 0x60
 8003426:	2202      	movs	r2, #2
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e08b      	b.n	8003544 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	212c      	movs	r1, #44	; 0x2c
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	3361      	adds	r3, #97	; 0x61
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b04      	cmp	r3, #4
 800343e:	d109      	bne.n	8003454 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	3360      	adds	r3, #96	; 0x60
 800344e:	2202      	movs	r2, #2
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e077      	b.n	8003544 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3361      	adds	r3, #97	; 0x61
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d109      	bne.n	800347c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3360      	adds	r3, #96	; 0x60
 8003476:	2205      	movs	r2, #5
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	e063      	b.n	8003544 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	3361      	adds	r3, #97	; 0x61
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b06      	cmp	r3, #6
 800348e:	d009      	beq.n	80034a4 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	3361      	adds	r3, #97	; 0x61
 800349e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d14f      	bne.n	8003544 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	335c      	adds	r3, #92	; 0x5c
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	202c      	movs	r0, #44	; 0x2c
 80034bc:	fb00 f303 	mul.w	r3, r0, r3
 80034c0:	440b      	add	r3, r1
 80034c2:	335c      	adds	r3, #92	; 0x5c
 80034c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	335c      	adds	r3, #92	; 0x5c
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d912      	bls.n	8003500 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	335c      	adds	r3, #92	; 0x5c
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	3360      	adds	r3, #96	; 0x60
 80034fa:	2204      	movs	r2, #4
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e021      	b.n	8003544 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	3360      	adds	r3, #96	; 0x60
 800350e:	2202      	movs	r2, #2
 8003510:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003528:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003530:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	4413      	add	r3, r2
 800353a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353e:	461a      	mov	r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	4413      	add	r3, r2
 800354c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003550:	461a      	mov	r2, r3
 8003552:	2302      	movs	r3, #2
 8003554:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	b2d9      	uxtb	r1, r3
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	202c      	movs	r0, #44	; 0x2c
 8003560:	fb00 f303 	mul.w	r3, r0, r3
 8003564:	4413      	add	r3, r2
 8003566:	3360      	adds	r3, #96	; 0x60
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f005 f9cd 	bl	800890c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003572:	bf00      	nop
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b08a      	sub	sp, #40	; 0x28
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	0c5b      	lsrs	r3, r3, #17
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d004      	beq.n	80035c0 <HCD_RXQLVL_IRQHandler+0x46>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b05      	cmp	r3, #5
 80035ba:	f000 80a9 	beq.w	8003710 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035be:	e0aa      	b.n	8003716 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80a6 	beq.w	8003714 <HCD_RXQLVL_IRQHandler+0x19a>
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	3344      	adds	r3, #68	; 0x44
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 809b 	beq.w	8003714 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	212c      	movs	r1, #44	; 0x2c
 80035e4:	fb01 f303 	mul.w	r3, r1, r3
 80035e8:	4413      	add	r3, r2
 80035ea:	3350      	adds	r3, #80	; 0x50
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	441a      	add	r2, r3
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	202c      	movs	r0, #44	; 0x2c
 80035f8:	fb00 f303 	mul.w	r3, r0, r3
 80035fc:	440b      	add	r3, r1
 80035fe:	334c      	adds	r3, #76	; 0x4c
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d87a      	bhi.n	80036fc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	3344      	adds	r3, #68	; 0x44
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	b292      	uxth	r2, r2
 800361e:	4619      	mov	r1, r3
 8003620:	f002 fb55 	bl	8005cce <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	3344      	adds	r3, #68	; 0x44
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	441a      	add	r2, r3
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	202c      	movs	r0, #44	; 0x2c
 800363e:	fb00 f303 	mul.w	r3, r0, r3
 8003642:	440b      	add	r3, r1
 8003644:	3344      	adds	r3, #68	; 0x44
 8003646:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	212c      	movs	r1, #44	; 0x2c
 800364e:	fb01 f303 	mul.w	r3, r1, r3
 8003652:	4413      	add	r3, r2
 8003654:	3350      	adds	r3, #80	; 0x50
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	441a      	add	r2, r3
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	202c      	movs	r0, #44	; 0x2c
 8003662:	fb00 f303 	mul.w	r3, r0, r3
 8003666:	440b      	add	r3, r1
 8003668:	3350      	adds	r3, #80	; 0x50
 800366a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	4413      	add	r3, r2
 8003674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	0cdb      	lsrs	r3, r3, #19
 800367c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003680:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	212c      	movs	r1, #44	; 0x2c
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	4413      	add	r3, r2
 800368e:	3340      	adds	r3, #64	; 0x40
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4293      	cmp	r3, r2
 8003698:	d13c      	bne.n	8003714 <HCD_RXQLVL_IRQHandler+0x19a>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d039      	beq.n	8003714 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036b6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036be:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	461a      	mov	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	212c      	movs	r1, #44	; 0x2c
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	4413      	add	r3, r2
 80036de:	3354      	adds	r3, #84	; 0x54
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	f083 0301 	eor.w	r3, r3, #1
 80036e6:	b2d8      	uxtb	r0, r3
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	3354      	adds	r3, #84	; 0x54
 80036f6:	4602      	mov	r2, r0
 80036f8:	701a      	strb	r2, [r3, #0]
      break;
 80036fa:	e00b      	b.n	8003714 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	212c      	movs	r1, #44	; 0x2c
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	3360      	adds	r3, #96	; 0x60
 800370a:	2204      	movs	r2, #4
 800370c:	701a      	strb	r2, [r3, #0]
      break;
 800370e:	e001      	b.n	8003714 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003710:	bf00      	nop
 8003712:	e000      	b.n	8003716 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003714:	bf00      	nop
  }
}
 8003716:	bf00      	nop
 8003718:	3728      	adds	r7, #40	; 0x28
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800374a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d10b      	bne.n	800376e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d102      	bne.n	8003766 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f005 f8b7 	bl	80088d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b08      	cmp	r3, #8
 8003776:	d132      	bne.n	80037de <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f043 0308 	orr.w	r3, r3, #8
 800377e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b04      	cmp	r3, #4
 8003788:	d126      	bne.n	80037d8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d113      	bne.n	80037ba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003798:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800379c:	d106      	bne.n	80037ac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2102      	movs	r1, #2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f002 fbcd 	bl	8005f44 <USB_InitFSLSPClkSel>
 80037aa:	e011      	b.n	80037d0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2101      	movs	r1, #1
 80037b2:	4618      	mov	r0, r3
 80037b4:	f002 fbc6 	bl	8005f44 <USB_InitFSLSPClkSel>
 80037b8:	e00a      	b.n	80037d0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d106      	bne.n	80037d0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037c8:	461a      	mov	r2, r3
 80037ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 80037ce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f005 f8a9 	bl	8008928 <HAL_HCD_PortEnabled_Callback>
 80037d6:	e002      	b.n	80037de <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f005 f8b3 	bl	8008944 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d103      	bne.n	80037f0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f043 0320 	orr.w	r3, r3, #32
 80037ee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037f6:	461a      	mov	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	6013      	str	r3, [r2, #0]
}
 80037fc:	bf00      	nop
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e12b      	b.n	8003a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fd8a 	bl	8001344 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	; 0x24
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003868:	f001 f9fc 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 800386c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4a81      	ldr	r2, [pc, #516]	; (8003a78 <HAL_I2C_Init+0x274>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d807      	bhi.n	8003888 <HAL_I2C_Init+0x84>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a80      	ldr	r2, [pc, #512]	; (8003a7c <HAL_I2C_Init+0x278>)
 800387c:	4293      	cmp	r3, r2
 800387e:	bf94      	ite	ls
 8003880:	2301      	movls	r3, #1
 8003882:	2300      	movhi	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e006      	b.n	8003896 <HAL_I2C_Init+0x92>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a7d      	ldr	r2, [pc, #500]	; (8003a80 <HAL_I2C_Init+0x27c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	bf94      	ite	ls
 8003890:	2301      	movls	r3, #1
 8003892:	2300      	movhi	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0e7      	b.n	8003a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a78      	ldr	r2, [pc, #480]	; (8003a84 <HAL_I2C_Init+0x280>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	0c9b      	lsrs	r3, r3, #18
 80038a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4a6a      	ldr	r2, [pc, #424]	; (8003a78 <HAL_I2C_Init+0x274>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d802      	bhi.n	80038d8 <HAL_I2C_Init+0xd4>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	3301      	adds	r3, #1
 80038d6:	e009      	b.n	80038ec <HAL_I2C_Init+0xe8>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	4a69      	ldr	r2, [pc, #420]	; (8003a88 <HAL_I2C_Init+0x284>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	099b      	lsrs	r3, r3, #6
 80038ea:	3301      	adds	r3, #1
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	495c      	ldr	r1, [pc, #368]	; (8003a78 <HAL_I2C_Init+0x274>)
 8003908:	428b      	cmp	r3, r1
 800390a:	d819      	bhi.n	8003940 <HAL_I2C_Init+0x13c>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1e59      	subs	r1, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	fbb1 f3f3 	udiv	r3, r1, r3
 800391a:	1c59      	adds	r1, r3, #1
 800391c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003920:	400b      	ands	r3, r1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_I2C_Init+0x138>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1e59      	subs	r1, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	fbb1 f3f3 	udiv	r3, r1, r3
 8003934:	3301      	adds	r3, #1
 8003936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393a:	e051      	b.n	80039e0 <HAL_I2C_Init+0x1dc>
 800393c:	2304      	movs	r3, #4
 800393e:	e04f      	b.n	80039e0 <HAL_I2C_Init+0x1dc>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d111      	bne.n	800396c <HAL_I2C_Init+0x168>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	440b      	add	r3, r1
 8003956:	fbb0 f3f3 	udiv	r3, r0, r3
 800395a:	3301      	adds	r3, #1
 800395c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e012      	b.n	8003992 <HAL_I2C_Init+0x18e>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e58      	subs	r0, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	0099      	lsls	r1, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003982:	3301      	adds	r3, #1
 8003984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Init+0x196>
 8003996:	2301      	movs	r3, #1
 8003998:	e022      	b.n	80039e0 <HAL_I2C_Init+0x1dc>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10e      	bne.n	80039c0 <HAL_I2C_Init+0x1bc>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1e58      	subs	r0, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	460b      	mov	r3, r1
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	440b      	add	r3, r1
 80039b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b4:	3301      	adds	r3, #1
 80039b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039be:	e00f      	b.n	80039e0 <HAL_I2C_Init+0x1dc>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1e58      	subs	r0, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	0099      	lsls	r1, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	6809      	ldr	r1, [r1, #0]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69da      	ldr	r2, [r3, #28]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6911      	ldr	r1, [r2, #16]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68d2      	ldr	r2, [r2, #12]
 8003a1a:	4311      	orrs	r1, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	000186a0 	.word	0x000186a0
 8003a7c:	001e847f 	.word	0x001e847f
 8003a80:	003d08ff 	.word	0x003d08ff
 8003a84:	431bde83 	.word	0x431bde83
 8003a88:	10624dd3 	.word	0x10624dd3

08003a8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e128      	b.n	8003cf0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a90      	ldr	r2, [pc, #576]	; (8003cf8 <HAL_I2S_Init+0x26c>)
 8003ab6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fd fc8b 	bl	80013d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ad4:	f023 030f 	bic.w	r3, r3, #15
 8003ad8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d060      	beq.n	8003bac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003af2:	2310      	movs	r3, #16
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e001      	b.n	8003afc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003af8:	2320      	movs	r3, #32
 8003afa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d802      	bhi.n	8003b0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	f001 f9a0 	bl	8004e50 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b10:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b1a:	d125      	bne.n	8003b68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d010      	beq.n	8003b46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	461a      	mov	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	3305      	adds	r3, #5
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e01f      	b.n	8003b86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	461a      	mov	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	3305      	adds	r3, #5
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e00e      	b.n	8003b86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	461a      	mov	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	3305      	adds	r3, #5
 8003b84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4a5c      	ldr	r2, [pc, #368]	; (8003cfc <HAL_I2S_Init+0x270>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	08db      	lsrs	r3, r3, #3
 8003b90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e003      	b.n	8003bb4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bac:	2302      	movs	r3, #2
 8003bae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d902      	bls.n	8003bc0 <HAL_I2S_Init+0x134>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	2bff      	cmp	r3, #255	; 0xff
 8003bbe:	d907      	bls.n	8003bd0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	f043 0210 	orr.w	r2, r3, #16
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e08f      	b.n	8003cf0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	ea42 0103 	orr.w	r1, r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bee:	f023 030f 	bic.w	r3, r3, #15
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6851      	ldr	r1, [r2, #4]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6892      	ldr	r2, [r2, #8]
 8003bfa:	4311      	orrs	r1, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68d2      	ldr	r2, [r2, #12]
 8003c00:	4311      	orrs	r1, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6992      	ldr	r2, [r2, #24]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d161      	bne.n	8003ce0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a38      	ldr	r2, [pc, #224]	; (8003d00 <HAL_I2S_Init+0x274>)
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a37      	ldr	r2, [pc, #220]	; (8003d04 <HAL_I2S_Init+0x278>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d101      	bne.n	8003c30 <HAL_I2S_Init+0x1a4>
 8003c2c:	4b36      	ldr	r3, [pc, #216]	; (8003d08 <HAL_I2S_Init+0x27c>)
 8003c2e:	e001      	b.n	8003c34 <HAL_I2S_Init+0x1a8>
 8003c30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	4932      	ldr	r1, [pc, #200]	; (8003d04 <HAL_I2S_Init+0x278>)
 8003c3c:	428a      	cmp	r2, r1
 8003c3e:	d101      	bne.n	8003c44 <HAL_I2S_Init+0x1b8>
 8003c40:	4a31      	ldr	r2, [pc, #196]	; (8003d08 <HAL_I2S_Init+0x27c>)
 8003c42:	e001      	b.n	8003c48 <HAL_I2S_Init+0x1bc>
 8003c44:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003c48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c4c:	f023 030f 	bic.w	r3, r3, #15
 8003c50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2b      	ldr	r2, [pc, #172]	; (8003d04 <HAL_I2S_Init+0x278>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2S_Init+0x1d4>
 8003c5c:	4b2a      	ldr	r3, [pc, #168]	; (8003d08 <HAL_I2S_Init+0x27c>)
 8003c5e:	e001      	b.n	8003c64 <HAL_I2S_Init+0x1d8>
 8003c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c64:	2202      	movs	r2, #2
 8003c66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a25      	ldr	r2, [pc, #148]	; (8003d04 <HAL_I2S_Init+0x278>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <HAL_I2S_Init+0x1ea>
 8003c72:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <HAL_I2S_Init+0x27c>)
 8003c74:	e001      	b.n	8003c7a <HAL_I2S_Init+0x1ee>
 8003c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c86:	d003      	beq.n	8003c90 <HAL_I2S_Init+0x204>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e001      	b.n	8003c9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	897b      	ldrh	r3, [r7, #10]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cc8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <HAL_I2S_Init+0x278>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d101      	bne.n	8003cd8 <HAL_I2S_Init+0x24c>
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <HAL_I2S_Init+0x27c>)
 8003cd6:	e001      	b.n	8003cdc <HAL_I2S_Init+0x250>
 8003cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cdc:	897a      	ldrh	r2, [r7, #10]
 8003cde:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3720      	adds	r7, #32
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	08003e03 	.word	0x08003e03
 8003cfc:	cccccccd 	.word	0xcccccccd
 8003d00:	08003f19 	.word	0x08003f19
 8003d04:	40003800 	.word	0x40003800
 8003d08:	40003400 	.word	0x40003400

08003d0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	881a      	ldrh	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	1c9a      	adds	r2, r3, #2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10e      	bne.n	8003d9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ffb8 	bl	8003d0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	b292      	uxth	r2, r2
 8003db8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	1c9a      	adds	r2, r3, #2
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10e      	bne.n	8003dfa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff93 	bl	8003d20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d13a      	bne.n	8003e94 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d109      	bne.n	8003e3c <I2S_IRQHandler+0x3a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d102      	bne.n	8003e3c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ffb4 	bl	8003da4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d126      	bne.n	8003e94 <I2S_IRQHandler+0x92>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d11f      	bne.n	8003e94 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f043 0202 	orr.w	r2, r3, #2
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff ff50 	bl	8003d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d136      	bne.n	8003f0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d109      	bne.n	8003ebe <I2S_IRQHandler+0xbc>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d102      	bne.n	8003ebe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ff45 	bl	8003d48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d122      	bne.n	8003f0e <I2S_IRQHandler+0x10c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d11b      	bne.n	8003f0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ee4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f00:	f043 0204 	orr.w	r2, r3, #4
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ff13 	bl	8003d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f0e:	bf00      	nop
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4aa2      	ldr	r2, [pc, #648]	; (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f32:	4ba2      	ldr	r3, [pc, #648]	; (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f34:	e001      	b.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a9b      	ldr	r2, [pc, #620]	; (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d101      	bne.n	8003f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f50:	4b9a      	ldr	r3, [pc, #616]	; (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f52:	e001      	b.n	8003f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f64:	d004      	beq.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f040 8099 	bne.w	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d107      	bne.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f925 	bl	80041d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d107      	bne.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f9c8 	bl	8004334 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b40      	cmp	r3, #64	; 0x40
 8003fac:	d13a      	bne.n	8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d035      	beq.n	8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a7e      	ldr	r2, [pc, #504]	; (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003fc2:	4b7e      	ldr	r3, [pc, #504]	; (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fc4:	e001      	b.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4979      	ldr	r1, [pc, #484]	; (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fd2:	428b      	cmp	r3, r1
 8003fd4:	d101      	bne.n	8003fda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003fd6:	4b79      	ldr	r3, [pc, #484]	; (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fd8:	e001      	b.n	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fe2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ff2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	f043 0202 	orr.w	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff fe88 	bl	8003d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b08      	cmp	r3, #8
 800402c:	f040 80be 	bne.w	80041ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80b8 	beq.w	80041ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800404a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a59      	ldr	r2, [pc, #356]	; (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004056:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004058:	e001      	b.n	800405e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800405a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4954      	ldr	r1, [pc, #336]	; (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004066:	428b      	cmp	r3, r1
 8004068:	d101      	bne.n	800406e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800406a:	4b54      	ldr	r3, [pc, #336]	; (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800406c:	e001      	b.n	8004072 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800406e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004076:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	f043 0204 	orr.w	r2, r3, #4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fe4a 	bl	8003d34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040a0:	e084      	b.n	80041ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d107      	bne.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8be 	bl	8004238 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d107      	bne.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f8fd 	bl	80042d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d12f      	bne.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d02a      	beq.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2e      	ldr	r2, [pc, #184]	; (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004104:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004106:	e001      	b.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4929      	ldr	r1, [pc, #164]	; (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004114:	428b      	cmp	r3, r1
 8004116:	d101      	bne.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004118:	4b28      	ldr	r3, [pc, #160]	; (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800411a:	e001      	b.n	8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800411c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004120:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004124:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f043 0202 	orr.w	r2, r3, #2
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fdfa 	bl	8003d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b08      	cmp	r3, #8
 8004148:	d131      	bne.n	80041ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d02c      	beq.n	80041ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d101      	bne.n	8004162 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800415e:	4b17      	ldr	r3, [pc, #92]	; (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004160:	e001      	b.n	8004166 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4912      	ldr	r1, [pc, #72]	; (80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800416e:	428b      	cmp	r3, r1
 8004170:	d101      	bne.n	8004176 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004174:	e001      	b.n	800417a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800417a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800417e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800418e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	f043 0204 	orr.w	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fdc5 	bl	8003d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041aa:	e000      	b.n	80041ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041ac:	bf00      	nop
}
 80041ae:	bf00      	nop
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40003800 	.word	0x40003800
 80041bc:	40003400 	.word	0x40003400

080041c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	1c99      	adds	r1, r3, #2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6251      	str	r1, [r2, #36]	; 0x24
 80041e6:	881a      	ldrh	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d113      	bne.n	800422e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004214:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d106      	bne.n	800422e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ffc9 	bl	80041c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	1c99      	adds	r1, r3, #2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6251      	str	r1, [r2, #36]	; 0x24
 800424a:	8819      	ldrh	r1, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <I2SEx_TxISR_I2SExt+0x22>
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <I2SEx_TxISR_I2SExt+0x94>)
 8004258:	e001      	b.n	800425e <I2SEx_TxISR_I2SExt+0x26>
 800425a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800425e:	460a      	mov	r2, r1
 8004260:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d121      	bne.n	80042be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a12      	ldr	r2, [pc, #72]	; (80042c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <I2SEx_TxISR_I2SExt+0x50>
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <I2SEx_TxISR_I2SExt+0x94>)
 8004286:	e001      	b.n	800428c <I2SEx_TxISR_I2SExt+0x54>
 8004288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	490d      	ldr	r1, [pc, #52]	; (80042c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004294:	428b      	cmp	r3, r1
 8004296:	d101      	bne.n	800429c <I2SEx_TxISR_I2SExt+0x64>
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <I2SEx_TxISR_I2SExt+0x94>)
 800429a:	e001      	b.n	80042a0 <I2SEx_TxISR_I2SExt+0x68>
 800429c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ff81 	bl	80041c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40003800 	.word	0x40003800
 80042cc:	40003400 	.word	0x40003400

080042d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68d8      	ldr	r0, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	1c99      	adds	r1, r3, #2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80042e8:	b282      	uxth	r2, r0
 80042ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d113      	bne.n	800432c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004312:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff ff4a 	bl	80041c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d101      	bne.n	800434a <I2SEx_RxISR_I2SExt+0x16>
 8004346:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004348:	e001      	b.n	800434e <I2SEx_RxISR_I2SExt+0x1a>
 800434a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800434e:	68d8      	ldr	r0, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	1c99      	adds	r1, r3, #2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	62d1      	str	r1, [r2, #44]	; 0x2c
 800435a:	b282      	uxth	r2, r0
 800435c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d121      	bne.n	80043ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <I2SEx_RxISR_I2SExt+0x90>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d101      	bne.n	8004384 <I2SEx_RxISR_I2SExt+0x50>
 8004380:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004382:	e001      	b.n	8004388 <I2SEx_RxISR_I2SExt+0x54>
 8004384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	490d      	ldr	r1, [pc, #52]	; (80043c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004390:	428b      	cmp	r3, r1
 8004392:	d101      	bne.n	8004398 <I2SEx_RxISR_I2SExt+0x64>
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004396:	e001      	b.n	800439c <I2SEx_RxISR_I2SExt+0x68>
 8004398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800439c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff ff03 	bl	80041c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40003800 	.word	0x40003800
 80043c8:	40003400 	.word	0x40003400

080043cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e264      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d075      	beq.n	80044d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ea:	4ba3      	ldr	r3, [pc, #652]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00c      	beq.n	8004410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f6:	4ba0      	ldr	r3, [pc, #640]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d112      	bne.n	8004428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004402:	4b9d      	ldr	r3, [pc, #628]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800440e:	d10b      	bne.n	8004428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	4b99      	ldr	r3, [pc, #612]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d05b      	beq.n	80044d4 <HAL_RCC_OscConfig+0x108>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d157      	bne.n	80044d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e23f      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004430:	d106      	bne.n	8004440 <HAL_RCC_OscConfig+0x74>
 8004432:	4b91      	ldr	r3, [pc, #580]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a90      	ldr	r2, [pc, #576]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e01d      	b.n	800447c <HAL_RCC_OscConfig+0xb0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x98>
 800444a:	4b8b      	ldr	r3, [pc, #556]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a8a      	ldr	r2, [pc, #552]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	4b88      	ldr	r3, [pc, #544]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a87      	ldr	r2, [pc, #540]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0xb0>
 8004464:	4b84      	ldr	r3, [pc, #528]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a83      	ldr	r2, [pc, #524]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800446a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	4b81      	ldr	r3, [pc, #516]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a80      	ldr	r2, [pc, #512]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800447a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d013      	beq.n	80044ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fd f962 	bl	800174c <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800448c:	f7fd f95e 	bl	800174c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e204      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	4b76      	ldr	r3, [pc, #472]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0xc0>
 80044aa:	e014      	b.n	80044d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fd f94e 	bl	800174c <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b4:	f7fd f94a 	bl	800174c <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e1f0      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	4b6c      	ldr	r3, [pc, #432]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0xe8>
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d063      	beq.n	80045aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044e2:	4b65      	ldr	r3, [pc, #404]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ee:	4b62      	ldr	r3, [pc, #392]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d11c      	bne.n	8004534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044fa:	4b5f      	ldr	r3, [pc, #380]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d116      	bne.n	8004534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	4b5c      	ldr	r3, [pc, #368]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_RCC_OscConfig+0x152>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d001      	beq.n	800451e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e1c4      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451e:	4b56      	ldr	r3, [pc, #344]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4952      	ldr	r1, [pc, #328]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004532:	e03a      	b.n	80045aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d020      	beq.n	800457e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800453c:	4b4f      	ldr	r3, [pc, #316]	; (800467c <HAL_RCC_OscConfig+0x2b0>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004542:	f7fd f903 	bl	800174c <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800454a:	f7fd f8ff 	bl	800174c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e1a5      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	4b46      	ldr	r3, [pc, #280]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004568:	4b43      	ldr	r3, [pc, #268]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4940      	ldr	r1, [pc, #256]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	4313      	orrs	r3, r2
 800457a:	600b      	str	r3, [r1, #0]
 800457c:	e015      	b.n	80045aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800457e:	4b3f      	ldr	r3, [pc, #252]	; (800467c <HAL_RCC_OscConfig+0x2b0>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fd f8e2 	bl	800174c <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458c:	f7fd f8de 	bl	800174c <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e184      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	4b36      	ldr	r3, [pc, #216]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d030      	beq.n	8004618 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d016      	beq.n	80045ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045be:	4b30      	ldr	r3, [pc, #192]	; (8004680 <HAL_RCC_OscConfig+0x2b4>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7fd f8c2 	bl	800174c <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045cc:	f7fd f8be 	bl	800174c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e164      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	4b26      	ldr	r3, [pc, #152]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x200>
 80045ea:	e015      	b.n	8004618 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ec:	4b24      	ldr	r3, [pc, #144]	; (8004680 <HAL_RCC_OscConfig+0x2b4>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f2:	f7fd f8ab 	bl	800174c <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045fa:	f7fd f8a7 	bl	800174c <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e14d      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460c:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800460e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80a0 	beq.w	8004766 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004626:	2300      	movs	r3, #0
 8004628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
 8004646:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004652:	2301      	movs	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCC_OscConfig+0x2b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d121      	bne.n	80046a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <HAL_RCC_OscConfig+0x2b8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a07      	ldr	r2, [pc, #28]	; (8004684 <HAL_RCC_OscConfig+0x2b8>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466e:	f7fd f86d 	bl	800174c <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	e011      	b.n	800469a <HAL_RCC_OscConfig+0x2ce>
 8004676:	bf00      	nop
 8004678:	40023800 	.word	0x40023800
 800467c:	42470000 	.word	0x42470000
 8004680:	42470e80 	.word	0x42470e80
 8004684:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004688:	f7fd f860 	bl	800174c <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e106      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469a:	4b85      	ldr	r3, [pc, #532]	; (80048b0 <HAL_RCC_OscConfig+0x4e4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f0      	beq.n	8004688 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d106      	bne.n	80046bc <HAL_RCC_OscConfig+0x2f0>
 80046ae:	4b81      	ldr	r3, [pc, #516]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	4a80      	ldr	r2, [pc, #512]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ba:	e01c      	b.n	80046f6 <HAL_RCC_OscConfig+0x32a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b05      	cmp	r3, #5
 80046c2:	d10c      	bne.n	80046de <HAL_RCC_OscConfig+0x312>
 80046c4:	4b7b      	ldr	r3, [pc, #492]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	4a7a      	ldr	r2, [pc, #488]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046ca:	f043 0304 	orr.w	r3, r3, #4
 80046ce:	6713      	str	r3, [r2, #112]	; 0x70
 80046d0:	4b78      	ldr	r3, [pc, #480]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a77      	ldr	r2, [pc, #476]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
 80046dc:	e00b      	b.n	80046f6 <HAL_RCC_OscConfig+0x32a>
 80046de:	4b75      	ldr	r3, [pc, #468]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4a74      	ldr	r2, [pc, #464]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ea:	4b72      	ldr	r3, [pc, #456]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	4a71      	ldr	r2, [pc, #452]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046f0:	f023 0304 	bic.w	r3, r3, #4
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d015      	beq.n	800472a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fd f825 	bl	800174c <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004704:	e00a      	b.n	800471c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fd f821 	bl	800174c <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0c5      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471c:	4b65      	ldr	r3, [pc, #404]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ee      	beq.n	8004706 <HAL_RCC_OscConfig+0x33a>
 8004728:	e014      	b.n	8004754 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472a:	f7fd f80f 	bl	800174c <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004730:	e00a      	b.n	8004748 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004732:	f7fd f80b 	bl	800174c <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004740:	4293      	cmp	r3, r2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0af      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004748:	4b5a      	ldr	r3, [pc, #360]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1ee      	bne.n	8004732 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800475a:	4b56      	ldr	r3, [pc, #344]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	4a55      	ldr	r2, [pc, #340]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 8004760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004764:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 809b 	beq.w	80048a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004770:	4b50      	ldr	r3, [pc, #320]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b08      	cmp	r3, #8
 800477a:	d05c      	beq.n	8004836 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d141      	bne.n	8004808 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004784:	4b4c      	ldr	r3, [pc, #304]	; (80048b8 <HAL_RCC_OscConfig+0x4ec>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fc ffdf 	bl	800174c <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004792:	f7fc ffdb 	bl	800174c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e081      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a4:	4b43      	ldr	r3, [pc, #268]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	019b      	lsls	r3, r3, #6
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	3b01      	subs	r3, #1
 80047ca:	041b      	lsls	r3, r3, #16
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	061b      	lsls	r3, r3, #24
 80047d4:	4937      	ldr	r1, [pc, #220]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047da:	4b37      	ldr	r3, [pc, #220]	; (80048b8 <HAL_RCC_OscConfig+0x4ec>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fc ffb4 	bl	800174c <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e8:	f7fc ffb0 	bl	800174c <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e056      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fa:	4b2e      	ldr	r3, [pc, #184]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0x41c>
 8004806:	e04e      	b.n	80048a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004808:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <HAL_RCC_OscConfig+0x4ec>)
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480e:	f7fc ff9d 	bl	800174c <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004816:	f7fc ff99 	bl	800174c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e03f      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004828:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f0      	bne.n	8004816 <HAL_RCC_OscConfig+0x44a>
 8004834:	e037      	b.n	80048a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e032      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004842:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d028      	beq.n	80048a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d121      	bne.n	80048a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d11a      	bne.n	80048a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004872:	4013      	ands	r3, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004878:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800487a:	4293      	cmp	r3, r2
 800487c:	d111      	bne.n	80048a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	3b01      	subs	r3, #1
 800488c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d107      	bne.n	80048a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d001      	beq.n	80048a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40007000 	.word	0x40007000
 80048b4:	40023800 	.word	0x40023800
 80048b8:	42470060 	.word	0x42470060

080048bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0cc      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d0:	4b68      	ldr	r3, [pc, #416]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d90c      	bls.n	80048f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b65      	ldr	r3, [pc, #404]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b63      	ldr	r3, [pc, #396]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0b8      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004910:	4b59      	ldr	r3, [pc, #356]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4a58      	ldr	r2, [pc, #352]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800491a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004928:	4b53      	ldr	r3, [pc, #332]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a52      	ldr	r2, [pc, #328]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004934:	4b50      	ldr	r3, [pc, #320]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	494d      	ldr	r1, [pc, #308]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d044      	beq.n	80049dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d107      	bne.n	800496a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	4b47      	ldr	r3, [pc, #284]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d119      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e07f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d003      	beq.n	800497a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004976:	2b03      	cmp	r3, #3
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497a:	4b3f      	ldr	r3, [pc, #252]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e06f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498a:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e067      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499a:	4b37      	ldr	r3, [pc, #220]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4934      	ldr	r1, [pc, #208]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049ac:	f7fc fece 	bl	800174c <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7fc feca 	bl	800174c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e04f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	4b2b      	ldr	r3, [pc, #172]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 020c 	and.w	r2, r3, #12
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1eb      	bne.n	80049b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049dc:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d20c      	bcs.n	8004a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b22      	ldr	r3, [pc, #136]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e032      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a10:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4916      	ldr	r1, [pc, #88]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a2e:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	490e      	ldr	r1, [pc, #56]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a42:	f000 f821 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8004a46:	4602      	mov	r2, r0
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	490a      	ldr	r1, [pc, #40]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	5ccb      	ldrb	r3, [r1, r3]
 8004a56:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5a:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fc fe2e 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023c00 	.word	0x40023c00
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	08008f78 	.word	0x08008f78
 8004a80:	20000000 	.word	0x20000000
 8004a84:	20000004 	.word	0x20000004

08004a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa0:	4b67      	ldr	r3, [pc, #412]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	f200 80bd 	bhi.w	8004c2c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x34>
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aba:	e0b7      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004abc:	4b61      	ldr	r3, [pc, #388]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004abe:	60bb      	str	r3, [r7, #8]
       break;
 8004ac0:	e0b7      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ac2:	4b61      	ldr	r3, [pc, #388]	; (8004c48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ac4:	60bb      	str	r3, [r7, #8]
      break;
 8004ac6:	e0b4      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac8:	4b5d      	ldr	r3, [pc, #372]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ad2:	4b5b      	ldr	r3, [pc, #364]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d04d      	beq.n	8004b7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ade:	4b58      	ldr	r3, [pc, #352]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	099b      	lsrs	r3, r3, #6
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004aee:	f04f 0100 	mov.w	r1, #0
 8004af2:	ea02 0800 	and.w	r8, r2, r0
 8004af6:	ea03 0901 	and.w	r9, r3, r1
 8004afa:	4640      	mov	r0, r8
 8004afc:	4649      	mov	r1, r9
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	014b      	lsls	r3, r1, #5
 8004b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b0c:	0142      	lsls	r2, r0, #5
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	ebb0 0008 	subs.w	r0, r0, r8
 8004b16:	eb61 0109 	sbc.w	r1, r1, r9
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	018b      	lsls	r3, r1, #6
 8004b24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b28:	0182      	lsls	r2, r0, #6
 8004b2a:	1a12      	subs	r2, r2, r0
 8004b2c:	eb63 0301 	sbc.w	r3, r3, r1
 8004b30:	f04f 0000 	mov.w	r0, #0
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	00d9      	lsls	r1, r3, #3
 8004b3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b3e:	00d0      	lsls	r0, r2, #3
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	eb12 0208 	adds.w	r2, r2, r8
 8004b48:	eb43 0309 	adc.w	r3, r3, r9
 8004b4c:	f04f 0000 	mov.w	r0, #0
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	0259      	lsls	r1, r3, #9
 8004b56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b5a:	0250      	lsls	r0, r2, #9
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	f7fb fefa 	bl	8000964 <__aeabi_uldivmod>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4613      	mov	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e04a      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	099b      	lsrs	r3, r3, #6
 8004b80:	461a      	mov	r2, r3
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b8a:	f04f 0100 	mov.w	r1, #0
 8004b8e:	ea02 0400 	and.w	r4, r2, r0
 8004b92:	ea03 0501 	and.w	r5, r3, r1
 8004b96:	4620      	mov	r0, r4
 8004b98:	4629      	mov	r1, r5
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	014b      	lsls	r3, r1, #5
 8004ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ba8:	0142      	lsls	r2, r0, #5
 8004baa:	4610      	mov	r0, r2
 8004bac:	4619      	mov	r1, r3
 8004bae:	1b00      	subs	r0, r0, r4
 8004bb0:	eb61 0105 	sbc.w	r1, r1, r5
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	018b      	lsls	r3, r1, #6
 8004bbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bc2:	0182      	lsls	r2, r0, #6
 8004bc4:	1a12      	subs	r2, r2, r0
 8004bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bca:	f04f 0000 	mov.w	r0, #0
 8004bce:	f04f 0100 	mov.w	r1, #0
 8004bd2:	00d9      	lsls	r1, r3, #3
 8004bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bd8:	00d0      	lsls	r0, r2, #3
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	1912      	adds	r2, r2, r4
 8004be0:	eb45 0303 	adc.w	r3, r5, r3
 8004be4:	f04f 0000 	mov.w	r0, #0
 8004be8:	f04f 0100 	mov.w	r1, #0
 8004bec:	0299      	lsls	r1, r3, #10
 8004bee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004bf2:	0290      	lsls	r0, r2, #10
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	f7fb feae 	bl	8000964 <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	60bb      	str	r3, [r7, #8]
      break;
 8004c2a:	e002      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c2e:	60bb      	str	r3, [r7, #8]
      break;
 8004c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c32:	68bb      	ldr	r3, [r7, #8]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800
 8004c44:	00f42400 	.word	0x00f42400
 8004c48:	007a1200 	.word	0x007a1200

08004c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c50:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c52:	681b      	ldr	r3, [r3, #0]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000000 	.word	0x20000000

08004c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c68:	f7ff fff0 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	0a9b      	lsrs	r3, r3, #10
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	4903      	ldr	r1, [pc, #12]	; (8004c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c7a:	5ccb      	ldrb	r3, [r1, r3]
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40023800 	.word	0x40023800
 8004c88:	08008f88 	.word	0x08008f88

08004c8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d035      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cb4:	4b62      	ldr	r3, [pc, #392]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cba:	f7fc fd47 	bl	800174c <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cc2:	f7fc fd43 	bl	800174c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e0b0      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cd4:	4b5b      	ldr	r3, [pc, #364]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	019a      	lsls	r2, r3, #6
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	071b      	lsls	r3, r3, #28
 8004cec:	4955      	ldr	r1, [pc, #340]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cf4:	4b52      	ldr	r3, [pc, #328]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cfa:	f7fc fd27 	bl	800174c <HAL_GetTick>
 8004cfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d02:	f7fc fd23 	bl	800174c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e090      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d14:	4b4b      	ldr	r3, [pc, #300]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8083 	beq.w	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	4b44      	ldr	r3, [pc, #272]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	4a43      	ldr	r2, [pc, #268]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3e:	4b41      	ldr	r3, [pc, #260]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d4a:	4b3f      	ldr	r3, [pc, #252]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a3e      	ldr	r2, [pc, #248]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d56:	f7fc fcf9 	bl	800174c <HAL_GetTick>
 8004d5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d5e:	f7fc fcf5 	bl	800174c <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e062      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d70:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d7c:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d02f      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d028      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d9a:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004da4:	4b29      	ldr	r3, [pc, #164]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004daa:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004db0:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004db6:	4b23      	ldr	r3, [pc, #140]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d114      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dc2:	f7fc fcc3 	bl	800174c <HAL_GetTick>
 8004dc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dca:	f7fc fcbf 	bl	800174c <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e02a      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de0:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0ee      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df8:	d10d      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dfa:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0e:	490d      	ldr	r1, [pc, #52]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	608b      	str	r3, [r1, #8]
 8004e14:	e005      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	4a0a      	ldr	r2, [pc, #40]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e1c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e20:	6093      	str	r3, [r2, #8]
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e2e:	4905      	ldr	r1, [pc, #20]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	42470068 	.word	0x42470068
 8004e44:	40023800 	.word	0x40023800
 8004e48:	40007000 	.word	0x40007000
 8004e4c:	42470e40 	.word	0x42470e40

08004e50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d13e      	bne.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e6e:	4b23      	ldr	r3, [pc, #140]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d12f      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e84:	4b1e      	ldr	r3, [pc, #120]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e86:	617b      	str	r3, [r7, #20]
          break;
 8004e88:	e02f      	b.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e8a:	4b1c      	ldr	r3, [pc, #112]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e96:	d108      	bne.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e98:	4b18      	ldr	r3, [pc, #96]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea0:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	e007      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004eaa:	4b14      	ldr	r3, [pc, #80]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eb2:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004eba:	4b10      	ldr	r3, [pc, #64]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	fb02 f303 	mul.w	r3, r2, r3
 8004ecc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ece:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed4:	0f1b      	lsrs	r3, r3, #28
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]
          break;
 8004ee2:	e002      	b.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
          break;
 8004ee8:	bf00      	nop
        }
      }
      break;
 8004eea:	bf00      	nop
    }
  }
  return frequency;
 8004eec:	697b      	ldr	r3, [r7, #20]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40023800 	.word	0x40023800
 8004f00:	00bb8000 	.word	0x00bb8000
 8004f04:	007a1200 	.word	0x007a1200
 8004f08:	00f42400 	.word	0x00f42400

08004f0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e07b      	b.n	8005016 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d108      	bne.n	8004f38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f2e:	d009      	beq.n	8004f44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	61da      	str	r2, [r3, #28]
 8004f36:	e005      	b.n	8004f44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fc faa0 	bl	80014a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc8:	ea42 0103 	orr.w	r1, r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	0c1b      	lsrs	r3, r3, #16
 8004fe2:	f003 0104 	and.w	r1, r3, #4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	f003 0210 	and.w	r2, r3, #16
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005004:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b088      	sub	sp, #32
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	603b      	str	r3, [r7, #0]
 800502a:	4613      	mov	r3, r2
 800502c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_SPI_Transmit+0x22>
 800503c:	2302      	movs	r3, #2
 800503e:	e126      	b.n	800528e <HAL_SPI_Transmit+0x270>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005048:	f7fc fb80 	bl	800174c <HAL_GetTick>
 800504c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b01      	cmp	r3, #1
 800505c:	d002      	beq.n	8005064 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800505e:	2302      	movs	r3, #2
 8005060:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005062:	e10b      	b.n	800527c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_SPI_Transmit+0x52>
 800506a:	88fb      	ldrh	r3, [r7, #6]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005074:	e102      	b.n	800527c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2203      	movs	r2, #3
 800507a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	88fa      	ldrh	r2, [r7, #6]
 800508e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	88fa      	ldrh	r2, [r7, #6]
 8005094:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050bc:	d10f      	bne.n	80050de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d007      	beq.n	80050fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005104:	d14b      	bne.n	800519e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_SPI_Transmit+0xf6>
 800510e:	8afb      	ldrh	r3, [r7, #22]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d13e      	bne.n	8005192 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	881a      	ldrh	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	1c9a      	adds	r2, r3, #2
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005138:	e02b      	b.n	8005192 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b02      	cmp	r3, #2
 8005146:	d112      	bne.n	800516e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	881a      	ldrh	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	1c9a      	adds	r2, r3, #2
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	86da      	strh	r2, [r3, #54]	; 0x36
 800516c:	e011      	b.n	8005192 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800516e:	f7fc faed 	bl	800174c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d803      	bhi.n	8005186 <HAL_SPI_Transmit+0x168>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d102      	bne.n	800518c <HAL_SPI_Transmit+0x16e>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d102      	bne.n	8005192 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005190:	e074      	b.n	800527c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1ce      	bne.n	800513a <HAL_SPI_Transmit+0x11c>
 800519c:	e04c      	b.n	8005238 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_SPI_Transmit+0x18e>
 80051a6:	8afb      	ldrh	r3, [r7, #22]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d140      	bne.n	800522e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	7812      	ldrb	r2, [r2, #0]
 80051b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051d2:	e02c      	b.n	800522e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d113      	bne.n	800520a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	330c      	adds	r3, #12
 80051ec:	7812      	ldrb	r2, [r2, #0]
 80051ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	86da      	strh	r2, [r3, #54]	; 0x36
 8005208:	e011      	b.n	800522e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800520a:	f7fc fa9f 	bl	800174c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d803      	bhi.n	8005222 <HAL_SPI_Transmit+0x204>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d102      	bne.n	8005228 <HAL_SPI_Transmit+0x20a>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800522c:	e026      	b.n	800527c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1cd      	bne.n	80051d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fbd9 	bl	80059f4 <SPI_EndRxTxTransaction>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10a      	bne.n	800526c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005256:	2300      	movs	r3, #0
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e000      	b.n	800527c <HAL_SPI_Transmit+0x25e>
  }

error:
 800527a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800528c:	7ffb      	ldrb	r3, [r7, #31]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b088      	sub	sp, #32
 800529a:	af02      	add	r7, sp, #8
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052b2:	d112      	bne.n	80052da <HAL_SPI_Receive+0x44>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10e      	bne.n	80052da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2204      	movs	r2, #4
 80052c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052c4:	88fa      	ldrh	r2, [r7, #6]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	4613      	mov	r3, r2
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f8f1 	bl	80054b8 <HAL_SPI_TransmitReceive>
 80052d6:	4603      	mov	r3, r0
 80052d8:	e0ea      	b.n	80054b0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_SPI_Receive+0x52>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e0e3      	b.n	80054b0 <HAL_SPI_Receive+0x21a>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052f0:	f7fc fa2c 	bl	800174c <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d002      	beq.n	8005308 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005302:	2302      	movs	r3, #2
 8005304:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005306:	e0ca      	b.n	800549e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_SPI_Receive+0x7e>
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005318:	e0c1      	b.n	800549e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2204      	movs	r2, #4
 800531e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	88fa      	ldrh	r2, [r7, #6]
 8005332:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	88fa      	ldrh	r2, [r7, #6]
 8005338:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005360:	d10f      	bne.n	8005382 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005370:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005380:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d007      	beq.n	80053a0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d162      	bne.n	800546e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053a8:	e02e      	b.n	8005408 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d115      	bne.n	80053e4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f103 020c 	add.w	r2, r3, #12
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	7812      	ldrb	r2, [r2, #0]
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053e2:	e011      	b.n	8005408 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053e4:	f7fc f9b2 	bl	800174c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d803      	bhi.n	80053fc <HAL_SPI_Receive+0x166>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d102      	bne.n	8005402 <HAL_SPI_Receive+0x16c>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d102      	bne.n	8005408 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005406:	e04a      	b.n	800549e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1cb      	bne.n	80053aa <HAL_SPI_Receive+0x114>
 8005412:	e031      	b.n	8005478 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b01      	cmp	r3, #1
 8005420:	d113      	bne.n	800544a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	b292      	uxth	r2, r2
 800542e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	1c9a      	adds	r2, r3, #2
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005448:	e011      	b.n	800546e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800544a:	f7fc f97f 	bl	800174c <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d803      	bhi.n	8005462 <HAL_SPI_Receive+0x1cc>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d102      	bne.n	8005468 <HAL_SPI_Receive+0x1d2>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800546c:	e017      	b.n	800549e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1cd      	bne.n	8005414 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fa53 	bl	8005928 <SPI_EndRxTransaction>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	75fb      	strb	r3, [r7, #23]
 800549a:	e000      	b.n	800549e <HAL_SPI_Receive+0x208>
  }

error :
 800549c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08c      	sub	sp, #48	; 0x30
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054c6:	2301      	movs	r3, #1
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_SPI_TransmitReceive+0x26>
 80054da:	2302      	movs	r3, #2
 80054dc:	e18a      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x33c>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e6:	f7fc f931 	bl	800174c <HAL_GetTick>
 80054ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054fc:	887b      	ldrh	r3, [r7, #2]
 80054fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005500:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005504:	2b01      	cmp	r3, #1
 8005506:	d00f      	beq.n	8005528 <HAL_SPI_TransmitReceive+0x70>
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800550e:	d107      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x68>
 8005518:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800551c:	2b04      	cmp	r3, #4
 800551e:	d003      	beq.n	8005528 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005520:	2302      	movs	r3, #2
 8005522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005526:	e15b      	b.n	80057e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_SPI_TransmitReceive+0x82>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_SPI_TransmitReceive+0x82>
 8005534:	887b      	ldrh	r3, [r7, #2]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005540:	e14e      	b.n	80057e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b04      	cmp	r3, #4
 800554c:	d003      	beq.n	8005556 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2205      	movs	r2, #5
 8005552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	887a      	ldrh	r2, [r7, #2]
 8005566:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	887a      	ldrh	r2, [r7, #2]
 800556c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	887a      	ldrh	r2, [r7, #2]
 8005578:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	887a      	ldrh	r2, [r7, #2]
 800557e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d007      	beq.n	80055aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b2:	d178      	bne.n	80056a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_SPI_TransmitReceive+0x10a>
 80055bc:	8b7b      	ldrh	r3, [r7, #26]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d166      	bne.n	8005690 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	881a      	ldrh	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	1c9a      	adds	r2, r3, #2
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055e6:	e053      	b.n	8005690 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d11b      	bne.n	800562e <HAL_SPI_TransmitReceive+0x176>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d016      	beq.n	800562e <HAL_SPI_TransmitReceive+0x176>
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	2b01      	cmp	r3, #1
 8005604:	d113      	bne.n	800562e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	881a      	ldrh	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	1c9a      	adds	r2, r3, #2
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b01      	cmp	r3, #1
 800563a:	d119      	bne.n	8005670 <HAL_SPI_TransmitReceive+0x1b8>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d014      	beq.n	8005670 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	b292      	uxth	r2, r2
 8005652:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	1c9a      	adds	r2, r3, #2
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800566c:	2301      	movs	r3, #1
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005670:	f7fc f86c 	bl	800174c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800567c:	429a      	cmp	r2, r3
 800567e:	d807      	bhi.n	8005690 <HAL_SPI_TransmitReceive+0x1d8>
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d003      	beq.n	8005690 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800568e:	e0a7      	b.n	80057e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1a6      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x130>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1a1      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x130>
 80056a4:	e07c      	b.n	80057a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_SPI_TransmitReceive+0x1fc>
 80056ae:	8b7b      	ldrh	r3, [r7, #26]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d16b      	bne.n	800578c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	330c      	adds	r3, #12
 80056be:	7812      	ldrb	r2, [r2, #0]
 80056c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056da:	e057      	b.n	800578c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d11c      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x26c>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d017      	beq.n	8005724 <HAL_SPI_TransmitReceive+0x26c>
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d114      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	7812      	ldrb	r2, [r2, #0]
 8005706:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	b29a      	uxth	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b01      	cmp	r3, #1
 8005730:	d119      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x2ae>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d014      	beq.n	8005766 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005762:	2301      	movs	r3, #1
 8005764:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005766:	f7fb fff1 	bl	800174c <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005772:	429a      	cmp	r2, r3
 8005774:	d803      	bhi.n	800577e <HAL_SPI_TransmitReceive+0x2c6>
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d102      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x2cc>
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	2b00      	cmp	r3, #0
 8005782:	d103      	bne.n	800578c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800578a:	e029      	b.n	80057e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1a2      	bne.n	80056dc <HAL_SPI_TransmitReceive+0x224>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d19d      	bne.n	80056dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f925 	bl	80059f4 <SPI_EndRxTxTransaction>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d006      	beq.n	80057be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2220      	movs	r2, #32
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80057bc:	e010      	b.n	80057e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10b      	bne.n	80057de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	e000      	b.n	80057e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80057de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3730      	adds	r7, #48	; 0x30
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800580a:	b2db      	uxtb	r3, r3
}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	4613      	mov	r3, r2
 8005826:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005828:	f7fb ff90 	bl	800174c <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	4413      	add	r3, r2
 8005836:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005838:	f7fb ff88 	bl	800174c <HAL_GetTick>
 800583c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800583e:	4b39      	ldr	r3, [pc, #228]	; (8005924 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	015b      	lsls	r3, r3, #5
 8005844:	0d1b      	lsrs	r3, r3, #20
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	fb02 f303 	mul.w	r3, r2, r3
 800584c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800584e:	e054      	b.n	80058fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d050      	beq.n	80058fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005858:	f7fb ff78 	bl	800174c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	429a      	cmp	r2, r3
 8005866:	d902      	bls.n	800586e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d13d      	bne.n	80058ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800587c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005886:	d111      	bne.n	80058ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005890:	d004      	beq.n	800589c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589a:	d107      	bne.n	80058ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b4:	d10f      	bne.n	80058d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e017      	b.n	800591a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4013      	ands	r3, r2
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	429a      	cmp	r2, r3
 8005908:	bf0c      	ite	eq
 800590a:	2301      	moveq	r3, #1
 800590c:	2300      	movne	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	429a      	cmp	r2, r3
 8005916:	d19b      	bne.n	8005850 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3720      	adds	r7, #32
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20000000 	.word	0x20000000

08005928 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593c:	d111      	bne.n	8005962 <SPI_EndRxTransaction+0x3a>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005946:	d004      	beq.n	8005952 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005950:	d107      	bne.n	8005962 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005960:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800596a:	d12a      	bne.n	80059c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005974:	d012      	beq.n	800599c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2200      	movs	r2, #0
 800597e:	2180      	movs	r1, #128	; 0x80
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f7ff ff49 	bl	8005818 <SPI_WaitFlagStateUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d02d      	beq.n	80059e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005990:	f043 0220 	orr.w	r2, r3, #32
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e026      	b.n	80059ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2200      	movs	r2, #0
 80059a4:	2101      	movs	r1, #1
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f7ff ff36 	bl	8005818 <SPI_WaitFlagStateUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d01a      	beq.n	80059e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b6:	f043 0220 	orr.w	r2, r3, #32
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e013      	b.n	80059ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2200      	movs	r2, #0
 80059ca:	2101      	movs	r1, #1
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f7ff ff23 	bl	8005818 <SPI_WaitFlagStateUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d007      	beq.n	80059e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059dc:	f043 0220 	orr.w	r2, r3, #32
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e000      	b.n	80059ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a00:	4b1b      	ldr	r3, [pc, #108]	; (8005a70 <SPI_EndRxTxTransaction+0x7c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <SPI_EndRxTxTransaction+0x80>)
 8005a06:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0a:	0d5b      	lsrs	r3, r3, #21
 8005a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a10:	fb02 f303 	mul.w	r3, r2, r3
 8005a14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a1e:	d112      	bne.n	8005a46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2200      	movs	r2, #0
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f7ff fef4 	bl	8005818 <SPI_WaitFlagStateUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d016      	beq.n	8005a64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3a:	f043 0220 	orr.w	r2, r3, #32
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e00f      	b.n	8005a66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5c:	2b80      	cmp	r3, #128	; 0x80
 8005a5e:	d0f2      	beq.n	8005a46 <SPI_EndRxTxTransaction+0x52>
 8005a60:	e000      	b.n	8005a64 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a62:	bf00      	nop
  }

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000000 	.word	0x20000000
 8005a74:	165e9f81 	.word	0x165e9f81

08005a78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a78:	b084      	sub	sp, #16
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	f107 001c 	add.w	r0, r7, #28
 8005a86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d122      	bne.n	8005ad6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d105      	bne.n	8005aca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f94a 	bl	8005d64 <USB_CoreReset>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	73fb      	strb	r3, [r7, #15]
 8005ad4:	e01a      	b.n	8005b0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f93e 	bl	8005d64 <USB_CoreReset>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	639a      	str	r2, [r3, #56]	; 0x38
 8005afe:	e005      	b.n	8005b0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d10b      	bne.n	8005b2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f043 0206 	orr.w	r2, r3, #6
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f043 0220 	orr.w	r2, r3, #32
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b36:	b004      	add	sp, #16
 8005b38:	4770      	bx	lr

08005b3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f043 0201 	orr.w	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f023 0201 	bic.w	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d106      	bne.n	8005baa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]
 8005ba8:	e00b      	b.n	8005bc2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d106      	bne.n	8005bbe <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60da      	str	r2, [r3, #12]
 8005bbc:	e001      	b.n	8005bc2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e003      	b.n	8005bca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005bc2:	2032      	movs	r0, #50	; 0x32
 8005bc4:	f7fb fdce 	bl	8001764 <HAL_Delay>

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	019b      	lsls	r3, r3, #6
 8005be6:	f043 0220 	orr.w	r2, r3, #32
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4a09      	ldr	r2, [pc, #36]	; (8005c1c <USB_FlushTxFifo+0x48>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d901      	bls.n	8005c00 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e006      	b.n	8005c0e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d0f0      	beq.n	8005bee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	00030d40 	.word	0x00030d40

08005c20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2210      	movs	r2, #16
 8005c30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3301      	adds	r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <USB_FlushRxFifo+0x40>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d901      	bls.n	8005c44 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e006      	b.n	8005c52 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f003 0310 	and.w	r3, r3, #16
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	d0f0      	beq.n	8005c32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	00030d40 	.word	0x00030d40

08005c64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b089      	sub	sp, #36	; 0x24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	4611      	mov	r1, r2
 8005c70:	461a      	mov	r2, r3
 8005c72:	460b      	mov	r3, r1
 8005c74:	71fb      	strb	r3, [r7, #7]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005c82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d11a      	bne.n	8005cc0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c8a:	88bb      	ldrh	r3, [r7, #4]
 8005c8c:	3303      	adds	r3, #3
 8005c8e:	089b      	lsrs	r3, r3, #2
 8005c90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c92:	2300      	movs	r3, #0
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	e00f      	b.n	8005cb8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	031a      	lsls	r2, r3, #12
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d3eb      	bcc.n	8005c98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3724      	adds	r7, #36	; 0x24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b089      	sub	sp, #36	; 0x24
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	3303      	adds	r3, #3
 8005ce8:	089b      	lsrs	r3, r3, #2
 8005cea:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005cec:	2300      	movs	r3, #0
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	e00b      	b.n	8005d0a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	3304      	adds	r3, #4
 8005d02:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	3301      	adds	r3, #1
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d3ef      	bcc.n	8005cf2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005d12:	69fb      	ldr	r3, [r7, #28]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3724      	adds	r7, #36	; 0x24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4013      	ands	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d38:	68fb      	ldr	r3, [r7, #12]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f003 0301 	and.w	r3, r3, #1
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
	...

08005d64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3301      	adds	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <USB_CoreReset+0x64>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e01b      	b.n	8005dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	daf2      	bge.n	8005d70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f043 0201 	orr.w	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a09      	ldr	r2, [pc, #36]	; (8005dc8 <USB_CoreReset+0x64>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d901      	bls.n	8005dac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e006      	b.n	8005dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d0f0      	beq.n	8005d9a <USB_CoreReset+0x36>

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	00030d40 	.word	0x00030d40

08005dcc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dcc:	b084      	sub	sp, #16
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	f107 001c 	add.w	r0, r7, #28
 8005dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005de8:	461a      	mov	r2, r3
 8005dea:	2300      	movs	r3, #0
 8005dec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d018      	beq.n	8005e50 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d10a      	bne.n	8005e3a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e32:	f043 0304 	orr.w	r3, r3, #4
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	e014      	b.n	8005e64 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e48:	f023 0304 	bic.w	r3, r3, #4
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e009      	b.n	8005e64 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e5e:	f023 0304 	bic.w	r3, r3, #4
 8005e62:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005e64:	2110      	movs	r1, #16
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff feb4 	bl	8005bd4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff fed7 	bl	8005c20 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	e015      	b.n	8005ea4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e84:	461a      	mov	r2, r3
 8005e86:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e98:	461a      	mov	r2, r3
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d3e5      	bcc.n	8005e78 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005eac:	2101      	movs	r1, #1
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f8ac 	bl	800600c <USB_DriveVbus>

  HAL_Delay(200U);
 8005eb4:	20c8      	movs	r0, #200	; 0xc8
 8005eb6:	f7fb fc55 	bl	8001764 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eda:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <USB_HostInit+0x164>)
 8005ee0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <USB_HostInit+0x168>)
 8005ee6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005eea:	e009      	b.n	8005f00 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2280      	movs	r2, #128	; 0x80
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a10      	ldr	r2, [pc, #64]	; (8005f38 <USB_HostInit+0x16c>)
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a10      	ldr	r2, [pc, #64]	; (8005f3c <USB_HostInit+0x170>)
 8005efc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d105      	bne.n	8005f12 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f043 0210 	orr.w	r2, r3, #16
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <USB_HostInit+0x174>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f2a:	b004      	add	sp, #16
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	01000200 	.word	0x01000200
 8005f34:	00e00300 	.word	0x00e00300
 8005f38:	00600080 	.word	0x00600080
 8005f3c:	004000e0 	.word	0x004000e0
 8005f40:	a3200008 	.word	0xa3200008

08005f44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	68f9      	ldr	r1, [r7, #12]
 8005f78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d107      	bne.n	8005f96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005f92:	6053      	str	r3, [r2, #4]
 8005f94:	e009      	b.n	8005faa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d106      	bne.n	8005faa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f241 7370 	movw	r3, #6000	; 0x1770
 8005fa8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005fd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005fe8:	2064      	movs	r0, #100	; 0x64
 8005fea:	f7fb fbbb 	bl	8001764 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ffa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ffc:	200a      	movs	r0, #10
 8005ffe:	f7fb fbb1 	bl	8001764 <HAL_Delay>

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006030:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d109      	bne.n	8006050 <USB_DriveVbus+0x44>
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d106      	bne.n	8006050 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800604a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800604e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605a:	d109      	bne.n	8006070 <USB_DriveVbus+0x64>
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800606a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800606e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800607e:	b480      	push	{r7}
 8006080:	b085      	sub	sp, #20
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	0c5b      	lsrs	r3, r3, #17
 800609c:	f003 0303 	and.w	r3, r3, #3
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	b29b      	uxth	r3, r3
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b088      	sub	sp, #32
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	4608      	mov	r0, r1
 80060da:	4611      	mov	r1, r2
 80060dc:	461a      	mov	r2, r3
 80060de:	4603      	mov	r3, r0
 80060e0:	70fb      	strb	r3, [r7, #3]
 80060e2:	460b      	mov	r3, r1
 80060e4:	70bb      	strb	r3, [r7, #2]
 80060e6:	4613      	mov	r3, r2
 80060e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fe:	461a      	mov	r2, r3
 8006100:	f04f 33ff 	mov.w	r3, #4294967295
 8006104:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006106:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800610a:	2b03      	cmp	r3, #3
 800610c:	d87e      	bhi.n	800620c <USB_HC_Init+0x13c>
 800610e:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <USB_HC_Init+0x44>)
 8006110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006114:	08006125 	.word	0x08006125
 8006118:	080061cf 	.word	0x080061cf
 800611c:	08006125 	.word	0x08006125
 8006120:	08006191 	.word	0x08006191
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4413      	add	r3, r2
 800612c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006130:	461a      	mov	r2, r3
 8006132:	f240 439d 	movw	r3, #1181	; 0x49d
 8006136:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006138:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800613c:	2b00      	cmp	r3, #0
 800613e:	da10      	bge.n	8006162 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4413      	add	r3, r2
 8006148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	440a      	add	r2, r1
 8006156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800615a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800615e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006160:	e057      	b.n	8006212 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616a:	2b00      	cmp	r3, #0
 800616c:	d051      	beq.n	8006212 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4413      	add	r3, r2
 8006176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	78fa      	ldrb	r2, [r7, #3]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	440a      	add	r2, r1
 8006184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006188:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800618c:	60d3      	str	r3, [r2, #12]
      break;
 800618e:	e040      	b.n	8006212 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4413      	add	r3, r2
 8006198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619c:	461a      	mov	r2, r3
 800619e:	f240 639d 	movw	r3, #1693	; 0x69d
 80061a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	da34      	bge.n	8006216 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80061cc:	e023      	b.n	8006216 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061da:	461a      	mov	r2, r3
 80061dc:	f240 2325 	movw	r3, #549	; 0x225
 80061e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da17      	bge.n	800621a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	78fa      	ldrb	r2, [r7, #3]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006204:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006208:	60d3      	str	r3, [r2, #12]
      }
      break;
 800620a:	e006      	b.n	800621a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	77fb      	strb	r3, [r7, #31]
      break;
 8006210:	e004      	b.n	800621c <USB_HC_Init+0x14c>
      break;
 8006212:	bf00      	nop
 8006214:	e002      	b.n	800621c <USB_HC_Init+0x14c>
      break;
 8006216:	bf00      	nop
 8006218:	e000      	b.n	800621c <USB_HC_Init+0x14c>
      break;
 800621a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006222:	699a      	ldr	r2, [r3, #24]
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	2101      	movs	r1, #1
 800622c:	fa01 f303 	lsl.w	r3, r1, r3
 8006230:	6939      	ldr	r1, [r7, #16]
 8006232:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006236:	4313      	orrs	r3, r2
 8006238:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006246:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800624a:	2b00      	cmp	r3, #0
 800624c:	da03      	bge.n	8006256 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800624e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006252:	61bb      	str	r3, [r7, #24]
 8006254:	e001      	b.n	800625a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff ff0f 	bl	800607e <USB_GetHostSpeed>
 8006260:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006262:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006266:	2b02      	cmp	r3, #2
 8006268:	d106      	bne.n	8006278 <USB_HC_Init+0x1a8>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d003      	beq.n	8006278 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	e001      	b.n	800627c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800627c:	787b      	ldrb	r3, [r7, #1]
 800627e:	059b      	lsls	r3, r3, #22
 8006280:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006284:	78bb      	ldrb	r3, [r7, #2]
 8006286:	02db      	lsls	r3, r3, #11
 8006288:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800628c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800628e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006292:	049b      	lsls	r3, r3, #18
 8006294:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006298:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800629a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800629c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	0159      	lsls	r1, r3, #5
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	440b      	add	r3, r1
 80062ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062b8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80062ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d10f      	bne.n	80062e2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80062c2:	78fb      	ldrb	r3, [r7, #3]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	78fa      	ldrb	r2, [r7, #3]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80062e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3720      	adds	r7, #32
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08c      	sub	sp, #48	; 0x30
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	4613      	mov	r3, r2
 80062f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006308:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d02d      	beq.n	8006372 <USB_HC_StartXfer+0x86>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	791b      	ldrb	r3, [r3, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d129      	bne.n	8006372 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d117      	bne.n	8006354 <USB_HC_StartXfer+0x68>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	79db      	ldrb	r3, [r3, #7]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <USB_HC_StartXfer+0x48>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	79db      	ldrb	r3, [r3, #7]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d10f      	bne.n	8006354 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	4413      	add	r3, r2
 800633c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	440a      	add	r2, r1
 800634a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10b      	bne.n	8006372 <USB_HC_StartXfer+0x86>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	795b      	ldrb	r3, [r3, #5]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d107      	bne.n	8006372 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	785b      	ldrb	r3, [r3, #1]
 8006366:	4619      	mov	r1, r3
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fa2f 	bl	80067cc <USB_DoPing>
      return HAL_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	e0f8      	b.n	8006564 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d018      	beq.n	80063ac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	8912      	ldrh	r2, [r2, #8]
 8006382:	4413      	add	r3, r2
 8006384:	3b01      	subs	r3, #1
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	8912      	ldrh	r2, [r2, #8]
 800638a:	fbb3 f3f2 	udiv	r3, r3, r2
 800638e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006390:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006392:	8b7b      	ldrh	r3, [r7, #26]
 8006394:	429a      	cmp	r2, r3
 8006396:	d90b      	bls.n	80063b0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006398:	8b7b      	ldrh	r3, [r7, #26]
 800639a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800639c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	8912      	ldrh	r2, [r2, #8]
 80063a2:	fb02 f203 	mul.w	r2, r2, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	611a      	str	r2, [r3, #16]
 80063aa:	e001      	b.n	80063b0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80063ac:	2301      	movs	r3, #1
 80063ae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	78db      	ldrb	r3, [r3, #3]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	8912      	ldrh	r2, [r2, #8]
 80063be:	fb02 f203 	mul.w	r2, r2, r3
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	611a      	str	r2, [r3, #16]
 80063c6:	e003      	b.n	80063d0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	695a      	ldr	r2, [r3, #20]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063da:	04d9      	lsls	r1, r3, #19
 80063dc:	4b63      	ldr	r3, [pc, #396]	; (800656c <USB_HC_StartXfer+0x280>)
 80063de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	7a9b      	ldrb	r3, [r3, #10]
 80063e6:	075b      	lsls	r3, r3, #29
 80063e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063ec:	69f9      	ldr	r1, [r7, #28]
 80063ee:	0148      	lsls	r0, r1, #5
 80063f0:	6a39      	ldr	r1, [r7, #32]
 80063f2:	4401      	add	r1, r0
 80063f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d009      	beq.n	8006416 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	68d9      	ldr	r1, [r3, #12]
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006412:	460a      	mov	r2, r1
 8006414:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	bf0c      	ite	eq
 8006426:	2301      	moveq	r3, #1
 8006428:	2300      	movne	r3, #0
 800642a:	b2db      	uxtb	r3, r3
 800642c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	4413      	add	r3, r2
 8006436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	6a3a      	ldr	r2, [r7, #32]
 8006442:	440a      	add	r2, r1
 8006444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006448:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800644c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	7e7b      	ldrb	r3, [r7, #25]
 800645e:	075b      	lsls	r3, r3, #29
 8006460:	69f9      	ldr	r1, [r7, #28]
 8006462:	0148      	lsls	r0, r1, #5
 8006464:	6a39      	ldr	r1, [r7, #32]
 8006466:	4401      	add	r1, r0
 8006468:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800646c:	4313      	orrs	r3, r2
 800646e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	4413      	add	r3, r2
 8006478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006486:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	78db      	ldrb	r3, [r3, #3]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006496:	613b      	str	r3, [r7, #16]
 8006498:	e003      	b.n	80064a2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064a0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064a8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b6:	461a      	mov	r2, r3
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80064bc:	79fb      	ldrb	r3, [r7, #7]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e04e      	b.n	8006564 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	78db      	ldrb	r3, [r3, #3]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d149      	bne.n	8006562 <USB_HC_StartXfer+0x276>
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d045      	beq.n	8006562 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	79db      	ldrb	r3, [r3, #7]
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d830      	bhi.n	8006540 <USB_HC_StartXfer+0x254>
 80064de:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <USB_HC_StartXfer+0x1f8>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	080064f5 	.word	0x080064f5
 80064e8:	08006519 	.word	0x08006519
 80064ec:	080064f5 	.word	0x080064f5
 80064f0:	08006519 	.word	0x08006519
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	3303      	adds	r3, #3
 80064fa:	089b      	lsrs	r3, r3, #2
 80064fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80064fe:	8afa      	ldrh	r2, [r7, #22]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	b29b      	uxth	r3, r3
 8006506:	429a      	cmp	r2, r3
 8006508:	d91c      	bls.n	8006544 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f043 0220 	orr.w	r2, r3, #32
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	619a      	str	r2, [r3, #24]
        }
        break;
 8006516:	e015      	b.n	8006544 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	3303      	adds	r3, #3
 800651e:	089b      	lsrs	r3, r3, #2
 8006520:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006522:	8afa      	ldrh	r2, [r7, #22]
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	b29b      	uxth	r3, r3
 800652e:	429a      	cmp	r2, r3
 8006530:	d90a      	bls.n	8006548 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	619a      	str	r2, [r3, #24]
        }
        break;
 800653e:	e003      	b.n	8006548 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006540:	bf00      	nop
 8006542:	e002      	b.n	800654a <USB_HC_StartXfer+0x25e>
        break;
 8006544:	bf00      	nop
 8006546:	e000      	b.n	800654a <USB_HC_StartXfer+0x25e>
        break;
 8006548:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	68d9      	ldr	r1, [r3, #12]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	785a      	ldrb	r2, [r3, #1]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	b29b      	uxth	r3, r3
 8006558:	2000      	movs	r0, #0
 800655a:	9000      	str	r0, [sp, #0]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f7ff fb81 	bl	8005c64 <USB_WritePacket>
  }

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3728      	adds	r7, #40	; 0x28
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	1ff80000 	.word	0x1ff80000

08006570 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	b29b      	uxth	r3, r3
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006592:	b480      	push	{r7}
 8006594:	b089      	sub	sp, #36	; 0x24
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80065a2:	78fb      	ldrb	r3, [r7, #3]
 80065a4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	0c9b      	lsrs	r3, r3, #18
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	0fdb      	lsrs	r3, r3, #31
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d104      	bne.n	80065ec <USB_HC_Halt+0x5a>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e0e8      	b.n	80067be <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <USB_HC_Halt+0x66>
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d173      	bne.n	80066e0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	440a      	add	r2, r1
 800660e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006612:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006616:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 80cb 	bne.w	80067bc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d143      	bne.n	80066ba <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	4413      	add	r3, r2
 800663a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	0151      	lsls	r1, r2, #5
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	440a      	add	r2, r1
 8006648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800664c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006650:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	4413      	add	r3, r2
 800665a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	0151      	lsls	r1, r2, #5
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	440a      	add	r2, r1
 8006668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800666c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006670:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	440a      	add	r2, r1
 8006688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800668c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006690:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	3301      	adds	r3, #1
 8006696:	61fb      	str	r3, [r7, #28]
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800669e:	d81d      	bhi.n	80066dc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066b6:	d0ec      	beq.n	8006692 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066b8:	e080      	b.n	80067bc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	0151      	lsls	r1, r2, #5
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	440a      	add	r2, r1
 80066d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066da:	e06f      	b.n	80067bc <USB_HC_Halt+0x22a>
            break;
 80066dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066de:	e06d      	b.n	80067bc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d143      	bne.n	8006798 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	4413      	add	r3, r2
 8006718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	440a      	add	r2, r1
 8006726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800672a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800672e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	4413      	add	r3, r2
 8006738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	0151      	lsls	r1, r2, #5
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	440a      	add	r2, r1
 8006746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800674a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800674e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	440a      	add	r2, r1
 8006766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800676a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800676e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	3301      	adds	r3, #1
 8006774:	61fb      	str	r3, [r7, #28]
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800677c:	d81d      	bhi.n	80067ba <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	4413      	add	r3, r2
 8006786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006794:	d0ec      	beq.n	8006770 <USB_HC_Halt+0x1de>
 8006796:	e011      	b.n	80067bc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	e000      	b.n	80067bc <USB_HC_Halt+0x22a>
          break;
 80067ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3724      	adds	r7, #36	; 0x24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80067e0:	2301      	movs	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	04da      	lsls	r2, r3, #19
 80067e8:	4b15      	ldr	r3, [pc, #84]	; (8006840 <USB_DoPing+0x74>)
 80067ea:	4013      	ands	r3, r2
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	4413      	add	r3, r2
 8006806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006814:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800681c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	4413      	add	r3, r2
 8006826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682a:	461a      	mov	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	1ff80000 	.word	0x1ff80000

08006844 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff f981 	bl	8005b5c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800685a:	2110      	movs	r1, #16
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff f9b9 	bl	8005bd4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff f9dc 	bl	8005c20 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006868:	2300      	movs	r3, #0
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	e01f      	b.n	80068ae <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006884:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800688c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006894:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a2:	461a      	mov	r2, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	3301      	adds	r3, #1
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b0f      	cmp	r3, #15
 80068b2:	d9dc      	bls.n	800686e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068b4:	2300      	movs	r3, #0
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	e034      	b.n	8006924 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ee:	461a      	mov	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	3301      	adds	r3, #1
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006900:	d80c      	bhi.n	800691c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006918:	d0ec      	beq.n	80068f4 <USB_StopHost+0xb0>
 800691a:	e000      	b.n	800691e <USB_StopHost+0xda>
        break;
 800691c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	3301      	adds	r3, #1
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	2b0f      	cmp	r3, #15
 8006928:	d9c7      	bls.n	80068ba <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006930:	461a      	mov	r2, r3
 8006932:	f04f 33ff 	mov.w	r3, #4294967295
 8006936:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f04f 32ff 	mov.w	r2, #4294967295
 800693e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff f8fa 	bl	8005b3a <USB_EnableGlobalInt>

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b089      	sub	sp, #36	; 0x24
 8006954:	af04      	add	r7, sp, #16
 8006956:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006958:	2301      	movs	r3, #1
 800695a:	2202      	movs	r2, #2
 800695c:	2102      	movs	r1, #2
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fc66 	bl	8007230 <USBH_FindInterface>
 8006964:	4603      	mov	r3, r0
 8006966:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006968:	7bfb      	ldrb	r3, [r7, #15]
 800696a:	2bff      	cmp	r3, #255	; 0xff
 800696c:	d002      	beq.n	8006974 <USBH_CDC_InterfaceInit+0x24>
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d901      	bls.n	8006978 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006974:	2302      	movs	r3, #2
 8006976:	e13d      	b.n	8006bf4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006978:	7bfb      	ldrb	r3, [r7, #15]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fc3b 	bl	80071f8 <USBH_SelectInterface>
 8006982:	4603      	mov	r3, r0
 8006984:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800698c:	2302      	movs	r3, #2
 800698e:	e131      	b.n	8006bf4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006996:	2050      	movs	r0, #80	; 0x50
 8006998:	f002 fa00 	bl	8008d9c <malloc>
 800699c:	4603      	mov	r3, r0
 800699e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069b0:	2302      	movs	r3, #2
 80069b2:	e11f      	b.n	8006bf4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069b4:	2250      	movs	r2, #80	; 0x50
 80069b6:	2100      	movs	r1, #0
 80069b8:	68b8      	ldr	r0, [r7, #8]
 80069ba:	f002 f9ff 	bl	8008dbc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	211a      	movs	r1, #26
 80069c4:	fb01 f303 	mul.w	r3, r1, r3
 80069c8:	4413      	add	r3, r2
 80069ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	b25b      	sxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	da15      	bge.n	8006a02 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	211a      	movs	r1, #26
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	4413      	add	r3, r2
 80069e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069e6:	781a      	ldrb	r2, [r3, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	211a      	movs	r1, #26
 80069f2:	fb01 f303 	mul.w	r3, r1, r3
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069fc:	881a      	ldrh	r2, [r3, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	785b      	ldrb	r3, [r3, #1]
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 fe32 	bl	8008672 <USBH_AllocPipe>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	461a      	mov	r2, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	7819      	ldrb	r1, [r3, #0]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	7858      	ldrb	r0, [r3, #1]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	8952      	ldrh	r2, [r2, #10]
 8006a2e:	9202      	str	r2, [sp, #8]
 8006a30:	2203      	movs	r2, #3
 8006a32:	9201      	str	r2, [sp, #4]
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	4623      	mov	r3, r4
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fdea 	bl	8008614 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2200      	movs	r2, #0
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f002 f8f9 	bl	8008c40 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a4e:	2300      	movs	r3, #0
 8006a50:	2200      	movs	r2, #0
 8006a52:	210a      	movs	r1, #10
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fbeb 	bl	8007230 <USBH_FindInterface>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	2bff      	cmp	r3, #255	; 0xff
 8006a62:	d002      	beq.n	8006a6a <USBH_CDC_InterfaceInit+0x11a>
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d901      	bls.n	8006a6e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e0c2      	b.n	8006bf4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	211a      	movs	r1, #26
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	b25b      	sxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	da16      	bge.n	8006ab4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	211a      	movs	r1, #26
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	4413      	add	r3, r2
 8006a92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	211a      	movs	r1, #26
 8006aa2:	fb01 f303 	mul.w	r3, r1, r3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	835a      	strh	r2, [r3, #26]
 8006ab2:	e015      	b.n	8006ae0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	211a      	movs	r1, #26
 8006aba:	fb01 f303 	mul.w	r3, r1, r3
 8006abe:	4413      	add	r3, r2
 8006ac0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ac4:	781a      	ldrb	r2, [r3, #0]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	211a      	movs	r1, #26
 8006ad0:	fb01 f303 	mul.w	r3, r1, r3
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ada:	881a      	ldrh	r2, [r3, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	211a      	movs	r1, #26
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	b25b      	sxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	da16      	bge.n	8006b26 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	211a      	movs	r1, #26
 8006afe:	fb01 f303 	mul.w	r3, r1, r3
 8006b02:	4413      	add	r3, r2
 8006b04:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	211a      	movs	r1, #26
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b1e:	881a      	ldrh	r2, [r3, #0]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	835a      	strh	r2, [r3, #26]
 8006b24:	e015      	b.n	8006b52 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	211a      	movs	r1, #26
 8006b2c:	fb01 f303 	mul.w	r3, r1, r3
 8006b30:	4413      	add	r3, r2
 8006b32:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b36:	781a      	ldrb	r2, [r3, #0]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	211a      	movs	r1, #26
 8006b42:	fb01 f303 	mul.w	r3, r1, r3
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b4c:	881a      	ldrh	r2, [r3, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	7b9b      	ldrb	r3, [r3, #14]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 fd8a 	bl	8008672 <USBH_AllocPipe>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	461a      	mov	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	7bdb      	ldrb	r3, [r3, #15]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 fd80 	bl	8008672 <USBH_AllocPipe>
 8006b72:	4603      	mov	r3, r0
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	7b59      	ldrb	r1, [r3, #13]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	7b98      	ldrb	r0, [r3, #14]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	8b12      	ldrh	r2, [r2, #24]
 8006b92:	9202      	str	r2, [sp, #8]
 8006b94:	2202      	movs	r2, #2
 8006b96:	9201      	str	r2, [sp, #4]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	4623      	mov	r3, r4
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 fd38 	bl	8008614 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	7b19      	ldrb	r1, [r3, #12]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	7bd8      	ldrb	r0, [r3, #15]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	8b52      	ldrh	r2, [r2, #26]
 8006bbc:	9202      	str	r2, [sp, #8]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	9201      	str	r2, [sp, #4]
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	4623      	mov	r3, r4
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 fd23 	bl	8008614 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	7b5b      	ldrb	r3, [r3, #13]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f002 f82e 	bl	8008c40 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	7b1b      	ldrb	r3, [r3, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f002 f827 	bl	8008c40 <USBH_LL_SetToggle>

  return USBH_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd90      	pop	{r4, r7, pc}

08006bfc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00e      	beq.n	8006c34 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 fd18 	bl	8008652 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 fd43 	bl	80086b4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	7b1b      	ldrb	r3, [r3, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00e      	beq.n	8006c5a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	7b1b      	ldrb	r3, [r3, #12]
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fd05 	bl	8008652 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	7b1b      	ldrb	r3, [r3, #12]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 fd30 	bl	80086b4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	7b5b      	ldrb	r3, [r3, #13]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00e      	beq.n	8006c80 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	7b5b      	ldrb	r3, [r3, #13]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 fcf2 	bl	8008652 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	7b5b      	ldrb	r3, [r3, #13]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fd1d 	bl	80086b4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f002 f889 	bl	8008dac <free>
    phost->pActiveClass->pData = 0U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3340      	adds	r3, #64	; 0x40
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f8b1 	bl	8006e2e <GetLineCoding>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d105      	bne.n	8006ce2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cdc:	2102      	movs	r1, #2
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d877      	bhi.n	8006e00 <USBH_CDC_Process+0x114>
 8006d10:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <USBH_CDC_Process+0x2c>)
 8006d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006d2d 	.word	0x08006d2d
 8006d1c:	08006d33 	.word	0x08006d33
 8006d20:	08006d63 	.word	0x08006d63
 8006d24:	08006dd7 	.word	0x08006dd7
 8006d28:	08006de5 	.word	0x08006de5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d30:	e06d      	b.n	8006e0e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f897 	bl	8006e6c <SetLineCoding>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d104      	bne.n	8006d52 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d50:	e058      	b.n	8006e04 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d055      	beq.n	8006e04 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006d60:	e050      	b.n	8006e04 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	3340      	adds	r3, #64	; 0x40
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f860 	bl	8006e2e <GetLineCoding>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d126      	bne.n	8006dc6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d8a:	791b      	ldrb	r3, [r3, #4]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d13b      	bne.n	8006e08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d133      	bne.n	8006e08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006daa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d12b      	bne.n	8006e08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d124      	bne.n	8006e08 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f958 	bl	8007074 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006dc4:	e020      	b.n	8006e08 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d01d      	beq.n	8006e08 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2204      	movs	r2, #4
 8006dd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006dd4:	e018      	b.n	8006e08 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f867 	bl	8006eaa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f8da 	bl	8006f96 <CDC_ProcessReception>
      break;
 8006de2:	e014      	b.n	8006e0e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006de4:	2100      	movs	r1, #0
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 ffe3 	bl	8007db2 <USBH_ClrFeature>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10a      	bne.n	8006e0c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006dfe:	e005      	b.n	8006e0c <USBH_CDC_Process+0x120>

    default:
      break;
 8006e00:	bf00      	nop
 8006e02:	e004      	b.n	8006e0e <USBH_CDC_Process+0x122>
      break;
 8006e04:	bf00      	nop
 8006e06:	e002      	b.n	8006e0e <USBH_CDC_Process+0x122>
      break;
 8006e08:	bf00      	nop
 8006e0a:	e000      	b.n	8006e0e <USBH_CDC_Process+0x122>
      break;
 8006e0c:	bf00      	nop

  }

  return status;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	22a1      	movs	r2, #161	; 0xa1
 8006e3c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2221      	movs	r2, #33	; 0x21
 8006e42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2207      	movs	r2, #7
 8006e54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2207      	movs	r2, #7
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 f988 	bl	8008172 <USBH_CtlReq>
 8006e62:	4603      	mov	r3, r0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2221      	movs	r2, #33	; 0x21
 8006e7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2207      	movs	r2, #7
 8006e92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2207      	movs	r2, #7
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 f969 	bl	8008172 <USBH_CtlReq>
 8006ea0:	4603      	mov	r3, r0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b086      	sub	sp, #24
 8006eae:	af02      	add	r7, sp, #8
 8006eb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d002      	beq.n	8006ed0 <CDC_ProcessTransmission+0x26>
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d023      	beq.n	8006f16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006ece:	e05e      	b.n	8006f8e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	8b12      	ldrh	r2, [r2, #24]
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d90b      	bls.n	8006ef4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	69d9      	ldr	r1, [r3, #28]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8b1a      	ldrh	r2, [r3, #24]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	7b5b      	ldrb	r3, [r3, #13]
 8006ee8:	2001      	movs	r0, #1
 8006eea:	9000      	str	r0, [sp, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 fb4e 	bl	800858e <USBH_BulkSendData>
 8006ef2:	e00b      	b.n	8006f0c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	7b5b      	ldrb	r3, [r3, #13]
 8006f02:	2001      	movs	r0, #1
 8006f04:	9000      	str	r0, [sp, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 fb41 	bl	800858e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f14:	e03b      	b.n	8006f8e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	7b5b      	ldrb	r3, [r3, #13]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fe65 	bl	8008bec <USBH_LL_GetURBState>
 8006f22:	4603      	mov	r3, r0
 8006f24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f26:	7afb      	ldrb	r3, [r7, #11]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d128      	bne.n	8006f7e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	8b12      	ldrh	r2, [r2, #24]
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d90e      	bls.n	8006f56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	8b12      	ldrh	r2, [r2, #24]
 8006f40:	1a9a      	subs	r2, r3, r2
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	8b12      	ldrh	r2, [r2, #24]
 8006f4e:	441a      	add	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	61da      	str	r2, [r3, #28]
 8006f54:	e002      	b.n	8006f5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d004      	beq.n	8006f6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f6c:	e00e      	b.n	8006f8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f868 	bl	800704c <USBH_CDC_TransmitCallback>
      break;
 8006f7c:	e006      	b.n	8006f8c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d103      	bne.n	8006f8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f8c:	bf00      	nop
  }
}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b086      	sub	sp, #24
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d002      	beq.n	8006fbc <CDC_ProcessReception+0x26>
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d00e      	beq.n	8006fd8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006fba:	e043      	b.n	8007044 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	6a19      	ldr	r1, [r3, #32]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	8b5a      	ldrh	r2, [r3, #26]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	7b1b      	ldrb	r3, [r3, #12]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fb05 	bl	80085d8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2204      	movs	r2, #4
 8006fd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006fd6:	e035      	b.n	8007044 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	7b1b      	ldrb	r3, [r3, #12]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 fe04 	bl	8008bec <USBH_LL_GetURBState>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006fe8:	7cfb      	ldrb	r3, [r7, #19]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d129      	bne.n	8007042 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	7b1b      	ldrb	r3, [r3, #12]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fd67 	bl	8008ac8 <USBH_LL_GetLastXferSize>
 8006ffa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	429a      	cmp	r2, r3
 8007004:	d016      	beq.n	8007034 <CDC_ProcessReception+0x9e>
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	8b5b      	ldrh	r3, [r3, #26]
 800700a:	461a      	mov	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4293      	cmp	r3, r2
 8007010:	d910      	bls.n	8007034 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	1ad2      	subs	r2, r2, r3
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	6a1a      	ldr	r2, [r3, #32]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	441a      	add	r2, r3
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2203      	movs	r2, #3
 800702e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007032:	e006      	b.n	8007042 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f80f 	bl	8007060 <USBH_CDC_ReceiveCallback>
      break;
 8007042:	bf00      	nop
  }
}
 8007044:	bf00      	nop
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800709c:	2302      	movs	r3, #2
 800709e:	e029      	b.n	80070f4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	79fa      	ldrb	r2, [r7, #7]
 80070a4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f81f 	bl	80070fc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f001 fc37 	bl	8008960 <USBH_LL_Init>

  return USBH_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007104:	2300      	movs	r3, #0
 8007106:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	e009      	b.n	8007122 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	33e0      	adds	r3, #224	; 0xe0
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	2200      	movs	r2, #0
 800711a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3301      	adds	r3, #1
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b0e      	cmp	r3, #14
 8007126:	d9f2      	bls.n	800710e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e009      	b.n	8007142 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007138:	2200      	movs	r2, #0
 800713a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007148:	d3f1      	bcc.n	800712e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2240      	movs	r2, #64	; 0x40
 800716e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d016      	beq.n	80071e6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10e      	bne.n	80071e0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071c8:	1c59      	adds	r1, r3, #1
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	33de      	adds	r3, #222	; 0xde
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
 80071de:	e004      	b.n	80071ea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80071e0:	2302      	movs	r3, #2
 80071e2:	73fb      	strb	r3, [r7, #15]
 80071e4:	e001      	b.n	80071ea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80071e6:	2302      	movs	r3, #2
 80071e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800720e:	78fa      	ldrb	r2, [r7, #3]
 8007210:	429a      	cmp	r2, r3
 8007212:	d204      	bcs.n	800721e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800721c:	e001      	b.n	8007222 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800721e:	2302      	movs	r3, #2
 8007220:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007222:	7bfb      	ldrb	r3, [r7, #15]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	4608      	mov	r0, r1
 800723a:	4611      	mov	r1, r2
 800723c:	461a      	mov	r2, r3
 800723e:	4603      	mov	r3, r0
 8007240:	70fb      	strb	r3, [r7, #3]
 8007242:	460b      	mov	r3, r1
 8007244:	70bb      	strb	r3, [r7, #2]
 8007246:	4613      	mov	r3, r2
 8007248:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800724e:	2300      	movs	r3, #0
 8007250:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007258:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800725a:	e025      	b.n	80072a8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	221a      	movs	r2, #26
 8007260:	fb02 f303 	mul.w	r3, r2, r3
 8007264:	3308      	adds	r3, #8
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4413      	add	r3, r2
 800726a:	3302      	adds	r3, #2
 800726c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	795b      	ldrb	r3, [r3, #5]
 8007272:	78fa      	ldrb	r2, [r7, #3]
 8007274:	429a      	cmp	r2, r3
 8007276:	d002      	beq.n	800727e <USBH_FindInterface+0x4e>
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	2bff      	cmp	r3, #255	; 0xff
 800727c:	d111      	bne.n	80072a2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007282:	78ba      	ldrb	r2, [r7, #2]
 8007284:	429a      	cmp	r2, r3
 8007286:	d002      	beq.n	800728e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007288:	78bb      	ldrb	r3, [r7, #2]
 800728a:	2bff      	cmp	r3, #255	; 0xff
 800728c:	d109      	bne.n	80072a2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007292:	787a      	ldrb	r2, [r7, #1]
 8007294:	429a      	cmp	r2, r3
 8007296:	d002      	beq.n	800729e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007298:	787b      	ldrb	r3, [r7, #1]
 800729a:	2bff      	cmp	r3, #255	; 0xff
 800729c:	d101      	bne.n	80072a2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	e006      	b.n	80072b0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	3301      	adds	r3, #1
 80072a6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d9d6      	bls.n	800725c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80072ae:	23ff      	movs	r3, #255	; 0xff
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 fb87 	bl	80089d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80072ca:	2101      	movs	r1, #1
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 fca0 	bl	8008c12 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b088      	sub	sp, #32
 80072e0:	af04      	add	r7, sp, #16
 80072e2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80072e4:	2302      	movs	r3, #2
 80072e6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d102      	bne.n	80072fe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2203      	movs	r2, #3
 80072fc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b0b      	cmp	r3, #11
 8007306:	f200 81b3 	bhi.w	8007670 <USBH_Process+0x394>
 800730a:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <USBH_Process+0x34>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	08007341 	.word	0x08007341
 8007314:	08007373 	.word	0x08007373
 8007318:	080073db 	.word	0x080073db
 800731c:	0800760b 	.word	0x0800760b
 8007320:	08007671 	.word	0x08007671
 8007324:	0800747f 	.word	0x0800747f
 8007328:	080075b1 	.word	0x080075b1
 800732c:	080074b5 	.word	0x080074b5
 8007330:	080074d5 	.word	0x080074d5
 8007334:	080074f5 	.word	0x080074f5
 8007338:	08007523 	.word	0x08007523
 800733c:	080075f3 	.word	0x080075f3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 8193 	beq.w	8007674 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007354:	20c8      	movs	r0, #200	; 0xc8
 8007356:	f001 fca3 	bl	8008ca0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 fb99 	bl	8008a92 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007370:	e180      	b.n	8007674 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007378:	2b01      	cmp	r3, #1
 800737a:	d107      	bne.n	800738c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800738a:	e182      	b.n	8007692 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007396:	d914      	bls.n	80073c2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800739e:	3301      	adds	r3, #1
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d903      	bls.n	80073ba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	220d      	movs	r2, #13
 80073b6:	701a      	strb	r2, [r3, #0]
      break;
 80073b8:	e16b      	b.n	8007692 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
      break;
 80073c0:	e167      	b.n	8007692 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073c8:	f103 020a 	add.w	r2, r3, #10
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80073d2:	200a      	movs	r0, #10
 80073d4:	f001 fc64 	bl	8008ca0 <USBH_Delay>
      break;
 80073d8:	e15b      	b.n	8007692 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ea:	2104      	movs	r1, #4
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80073f0:	2064      	movs	r0, #100	; 0x64
 80073f2:	f001 fc55 	bl	8008ca0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 fb24 	bl	8008a44 <USBH_LL_GetSpeed>
 80073fc:	4603      	mov	r3, r0
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2205      	movs	r2, #5
 800740a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800740c:	2100      	movs	r1, #0
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 f92f 	bl	8008672 <USBH_AllocPipe>
 8007414:	4603      	mov	r3, r0
 8007416:	461a      	mov	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800741c:	2180      	movs	r1, #128	; 0x80
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 f927 	bl	8008672 <USBH_AllocPipe>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	7919      	ldrb	r1, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007440:	b292      	uxth	r2, r2
 8007442:	9202      	str	r2, [sp, #8]
 8007444:	2200      	movs	r2, #0
 8007446:	9201      	str	r2, [sp, #4]
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	4603      	mov	r3, r0
 800744c:	2280      	movs	r2, #128	; 0x80
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 f8e0 	bl	8008614 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	7959      	ldrb	r1, [r3, #5]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007468:	b292      	uxth	r2, r2
 800746a:	9202      	str	r2, [sp, #8]
 800746c:	2200      	movs	r2, #0
 800746e:	9201      	str	r2, [sp, #4]
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	4603      	mov	r3, r0
 8007474:	2200      	movs	r2, #0
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 f8cc 	bl	8008614 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800747c:	e109      	b.n	8007692 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f90c 	bl	800769c <USBH_HandleEnum>
 8007484:	4603      	mov	r3, r0
 8007486:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 80f3 	bne.w	8007678 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d103      	bne.n	80074ac <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2208      	movs	r2, #8
 80074a8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074aa:	e0e5      	b.n	8007678 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2207      	movs	r2, #7
 80074b0:	701a      	strb	r2, [r3, #0]
      break;
 80074b2:	e0e1      	b.n	8007678 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 80de 	beq.w	800767c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074c6:	2101      	movs	r1, #1
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2208      	movs	r2, #8
 80074d0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80074d2:	e0d3      	b.n	800767c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80074da:	b29b      	uxth	r3, r3
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fc20 	bl	8007d24 <USBH_SetCfg>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f040 80ca 	bne.w	8007680 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2209      	movs	r2, #9
 80074f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074f2:	e0c5      	b.n	8007680 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80074fa:	f003 0320 	and.w	r3, r3, #32
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00b      	beq.n	800751a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007502:	2101      	movs	r1, #1
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fc30 	bl	8007d6a <USBH_SetFeature>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	f040 80b9 	bne.w	8007684 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	220a      	movs	r2, #10
 8007516:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007518:	e0b4      	b.n	8007684 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	220a      	movs	r2, #10
 800751e:	701a      	strb	r2, [r3, #0]
      break;
 8007520:	e0b0      	b.n	8007684 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 80ad 	beq.w	8007688 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]
 800753a:	e016      	b.n	800756a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800753c:	7bfa      	ldrb	r2, [r7, #15]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	32de      	adds	r2, #222	; 0xde
 8007542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007546:	791a      	ldrb	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800754e:	429a      	cmp	r2, r3
 8007550:	d108      	bne.n	8007564 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007552:	7bfa      	ldrb	r2, [r7, #15]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	32de      	adds	r2, #222	; 0xde
 8007558:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007562:	e005      	b.n	8007570 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	3301      	adds	r3, #1
 8007568:	73fb      	strb	r3, [r7, #15]
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0e5      	beq.n	800753c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007576:	2b00      	cmp	r3, #0
 8007578:	d016      	beq.n	80075a8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	4798      	blx	r3
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d109      	bne.n	80075a0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2206      	movs	r2, #6
 8007590:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007598:	2103      	movs	r1, #3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800759e:	e073      	b.n	8007688 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	220d      	movs	r2, #13
 80075a4:	701a      	strb	r2, [r3, #0]
      break;
 80075a6:	e06f      	b.n	8007688 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	220d      	movs	r2, #13
 80075ac:	701a      	strb	r2, [r3, #0]
      break;
 80075ae:	e06b      	b.n	8007688 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d017      	beq.n	80075ea <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	4798      	blx	r3
 80075c6:	4603      	mov	r3, r0
 80075c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	220b      	movs	r2, #11
 80075d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075d8:	e058      	b.n	800768c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d154      	bne.n	800768c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	220d      	movs	r2, #13
 80075e6:	701a      	strb	r2, [r3, #0]
      break;
 80075e8:	e050      	b.n	800768c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	220d      	movs	r2, #13
 80075ee:	701a      	strb	r2, [r3, #0]
      break;
 80075f0:	e04c      	b.n	800768c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d049      	beq.n	8007690 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	4798      	blx	r3
      }
      break;
 8007608:	e042      	b.n	8007690 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff fd72 	bl	80070fc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007646:	2105      	movs	r1, #5
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d107      	bne.n	8007668 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff fe2b 	bl	80072bc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007666:	e014      	b.n	8007692 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 f9b5 	bl	80089d8 <USBH_LL_Start>
      break;
 800766e:	e010      	b.n	8007692 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007670:	bf00      	nop
 8007672:	e00e      	b.n	8007692 <USBH_Process+0x3b6>
      break;
 8007674:	bf00      	nop
 8007676:	e00c      	b.n	8007692 <USBH_Process+0x3b6>
      break;
 8007678:	bf00      	nop
 800767a:	e00a      	b.n	8007692 <USBH_Process+0x3b6>
    break;
 800767c:	bf00      	nop
 800767e:	e008      	b.n	8007692 <USBH_Process+0x3b6>
      break;
 8007680:	bf00      	nop
 8007682:	e006      	b.n	8007692 <USBH_Process+0x3b6>
      break;
 8007684:	bf00      	nop
 8007686:	e004      	b.n	8007692 <USBH_Process+0x3b6>
      break;
 8007688:	bf00      	nop
 800768a:	e002      	b.n	8007692 <USBH_Process+0x3b6>
      break;
 800768c:	bf00      	nop
 800768e:	e000      	b.n	8007692 <USBH_Process+0x3b6>
      break;
 8007690:	bf00      	nop
  }
  return USBH_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af04      	add	r7, sp, #16
 80076a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076a4:	2301      	movs	r3, #1
 80076a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80076a8:	2301      	movs	r3, #1
 80076aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	785b      	ldrb	r3, [r3, #1]
 80076b0:	2b07      	cmp	r3, #7
 80076b2:	f200 81c1 	bhi.w	8007a38 <USBH_HandleEnum+0x39c>
 80076b6:	a201      	add	r2, pc, #4	; (adr r2, 80076bc <USBH_HandleEnum+0x20>)
 80076b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076bc:	080076dd 	.word	0x080076dd
 80076c0:	0800779b 	.word	0x0800779b
 80076c4:	08007805 	.word	0x08007805
 80076c8:	08007893 	.word	0x08007893
 80076cc:	080078fd 	.word	0x080078fd
 80076d0:	0800796d 	.word	0x0800796d
 80076d4:	080079b3 	.word	0x080079b3
 80076d8:	080079f9 	.word	0x080079f9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80076dc:	2108      	movs	r1, #8
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa50 	bl	8007b84 <USBH_Get_DevDesc>
 80076e4:	4603      	mov	r3, r0
 80076e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d130      	bne.n	8007750 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	7919      	ldrb	r1, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007712:	b292      	uxth	r2, r2
 8007714:	9202      	str	r2, [sp, #8]
 8007716:	2200      	movs	r2, #0
 8007718:	9201      	str	r2, [sp, #4]
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	4603      	mov	r3, r0
 800771e:	2280      	movs	r2, #128	; 0x80
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 ff77 	bl	8008614 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	7959      	ldrb	r1, [r3, #5]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800773a:	b292      	uxth	r2, r2
 800773c:	9202      	str	r2, [sp, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	9201      	str	r2, [sp, #4]
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	4603      	mov	r3, r0
 8007746:	2200      	movs	r2, #0
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 ff63 	bl	8008614 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800774e:	e175      	b.n	8007a3c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b03      	cmp	r3, #3
 8007754:	f040 8172 	bne.w	8007a3c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800775e:	3301      	adds	r3, #1
 8007760:	b2da      	uxtb	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800776e:	2b03      	cmp	r3, #3
 8007770:	d903      	bls.n	800777a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	220d      	movs	r2, #13
 8007776:	701a      	strb	r2, [r3, #0]
      break;
 8007778:	e160      	b.n	8007a3c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	795b      	ldrb	r3, [r3, #5]
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 ff97 	bl	80086b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	791b      	ldrb	r3, [r3, #4]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 ff91 	bl	80086b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]
      break;
 8007798:	e150      	b.n	8007a3c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800779a:	2112      	movs	r1, #18
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f9f1 	bl	8007b84 <USBH_Get_DevDesc>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d103      	bne.n	80077b4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077b2:	e145      	b.n	8007a40 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	f040 8142 	bne.w	8007a40 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077c2:	3301      	adds	r3, #1
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d903      	bls.n	80077de <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	220d      	movs	r2, #13
 80077da:	701a      	strb	r2, [r3, #0]
      break;
 80077dc:	e130      	b.n	8007a40 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	795b      	ldrb	r3, [r3, #5]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 ff65 	bl	80086b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	791b      	ldrb	r3, [r3, #4]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 ff5f 	bl	80086b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e11d      	b.n	8007a40 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007804:	2101      	movs	r1, #1
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa68 	bl	8007cdc <USBH_SetAddress>
 800780c:	4603      	mov	r3, r0
 800780e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d132      	bne.n	800787c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007816:	2002      	movs	r0, #2
 8007818:	f001 fa42 	bl	8008ca0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2203      	movs	r2, #3
 8007828:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7919      	ldrb	r1, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800783e:	b292      	uxth	r2, r2
 8007840:	9202      	str	r2, [sp, #8]
 8007842:	2200      	movs	r2, #0
 8007844:	9201      	str	r2, [sp, #4]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	4603      	mov	r3, r0
 800784a:	2280      	movs	r2, #128	; 0x80
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fee1 	bl	8008614 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	7959      	ldrb	r1, [r3, #5]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007866:	b292      	uxth	r2, r2
 8007868:	9202      	str	r2, [sp, #8]
 800786a:	2200      	movs	r2, #0
 800786c:	9201      	str	r2, [sp, #4]
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	4603      	mov	r3, r0
 8007872:	2200      	movs	r2, #0
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fecd 	bl	8008614 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800787a:	e0e3      	b.n	8007a44 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b03      	cmp	r3, #3
 8007880:	f040 80e0 	bne.w	8007a44 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	220d      	movs	r2, #13
 8007888:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	705a      	strb	r2, [r3, #1]
      break;
 8007890:	e0d8      	b.n	8007a44 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007892:	2109      	movs	r1, #9
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f99d 	bl	8007bd4 <USBH_Get_CfgDesc>
 800789a:	4603      	mov	r3, r0
 800789c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800789e:	7bbb      	ldrb	r3, [r7, #14]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d103      	bne.n	80078ac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2204      	movs	r2, #4
 80078a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078aa:	e0cd      	b.n	8007a48 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	f040 80ca 	bne.w	8007a48 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078ba:	3301      	adds	r3, #1
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d903      	bls.n	80078d6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	220d      	movs	r2, #13
 80078d2:	701a      	strb	r2, [r3, #0]
      break;
 80078d4:	e0b8      	b.n	8007a48 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	795b      	ldrb	r3, [r3, #5]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fee9 	bl	80086b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	791b      	ldrb	r3, [r3, #4]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fee3 	bl	80086b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	701a      	strb	r2, [r3, #0]
      break;
 80078fa:	e0a5      	b.n	8007a48 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f965 	bl	8007bd4 <USBH_Get_CfgDesc>
 800790a:	4603      	mov	r3, r0
 800790c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d103      	bne.n	800791c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2205      	movs	r2, #5
 8007918:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800791a:	e097      	b.n	8007a4c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b03      	cmp	r3, #3
 8007920:	f040 8094 	bne.w	8007a4c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800792a:	3301      	adds	r3, #1
 800792c:	b2da      	uxtb	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800793a:	2b03      	cmp	r3, #3
 800793c:	d903      	bls.n	8007946 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	220d      	movs	r2, #13
 8007942:	701a      	strb	r2, [r3, #0]
      break;
 8007944:	e082      	b.n	8007a4c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	795b      	ldrb	r3, [r3, #5]
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 feb1 	bl	80086b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	791b      	ldrb	r3, [r3, #4]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 feab 	bl	80086b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	701a      	strb	r2, [r3, #0]
      break;
 800796a:	e06f      	b.n	8007a4c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007972:	2b00      	cmp	r3, #0
 8007974:	d019      	beq.n	80079aa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007982:	23ff      	movs	r3, #255	; 0xff
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f949 	bl	8007c1c <USBH_Get_StringDesc>
 800798a:	4603      	mov	r3, r0
 800798c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d103      	bne.n	800799c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2206      	movs	r2, #6
 8007998:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800799a:	e059      	b.n	8007a50 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d156      	bne.n	8007a50 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2206      	movs	r2, #6
 80079a6:	705a      	strb	r2, [r3, #1]
      break;
 80079a8:	e052      	b.n	8007a50 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2206      	movs	r2, #6
 80079ae:	705a      	strb	r2, [r3, #1]
      break;
 80079b0:	e04e      	b.n	8007a50 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d019      	beq.n	80079f0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079c8:	23ff      	movs	r3, #255	; 0xff
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f926 	bl	8007c1c <USBH_Get_StringDesc>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d103      	bne.n	80079e2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2207      	movs	r2, #7
 80079de:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079e0:	e038      	b.n	8007a54 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d135      	bne.n	8007a54 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2207      	movs	r2, #7
 80079ec:	705a      	strb	r2, [r3, #1]
      break;
 80079ee:	e031      	b.n	8007a54 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2207      	movs	r2, #7
 80079f4:	705a      	strb	r2, [r3, #1]
      break;
 80079f6:	e02d      	b.n	8007a54 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d017      	beq.n	8007a32 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a0e:	23ff      	movs	r3, #255	; 0xff
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f903 	bl	8007c1c <USBH_Get_StringDesc>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d102      	bne.n	8007a26 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a24:	e018      	b.n	8007a58 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d115      	bne.n	8007a58 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a30:	e012      	b.n	8007a58 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
      break;
 8007a36:	e00f      	b.n	8007a58 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007a38:	bf00      	nop
 8007a3a:	e00e      	b.n	8007a5a <USBH_HandleEnum+0x3be>
      break;
 8007a3c:	bf00      	nop
 8007a3e:	e00c      	b.n	8007a5a <USBH_HandleEnum+0x3be>
      break;
 8007a40:	bf00      	nop
 8007a42:	e00a      	b.n	8007a5a <USBH_HandleEnum+0x3be>
      break;
 8007a44:	bf00      	nop
 8007a46:	e008      	b.n	8007a5a <USBH_HandleEnum+0x3be>
      break;
 8007a48:	bf00      	nop
 8007a4a:	e006      	b.n	8007a5a <USBH_HandleEnum+0x3be>
      break;
 8007a4c:	bf00      	nop
 8007a4e:	e004      	b.n	8007a5a <USBH_HandleEnum+0x3be>
      break;
 8007a50:	bf00      	nop
 8007a52:	e002      	b.n	8007a5a <USBH_HandleEnum+0x3be>
      break;
 8007a54:	bf00      	nop
 8007a56:	e000      	b.n	8007a5a <USBH_HandleEnum+0x3be>
      break;
 8007a58:	bf00      	nop
  }
  return Status;
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f804 	bl	8007aa6 <USBH_HandleSof>
}
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b0b      	cmp	r3, #11
 8007ab6:	d10a      	bne.n	8007ace <USBH_HandleSof+0x28>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
  }
}
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007ae6:	bf00      	nop
}
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b02:	bf00      	nop
}
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 ff56 	bl	8008a0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	791b      	ldrb	r3, [r3, #4]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fda3 	bl	80086b4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	795b      	ldrb	r3, [r3, #5]
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fd9d 	bl	80086b4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af02      	add	r7, sp, #8
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007b96:	78fb      	ldrb	r3, [r7, #3]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f864 	bl	8007c72 <USBH_GetDescriptor>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73fb      	strb	r3, [r7, #15]
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10a      	bne.n	8007bca <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bc0:	78fa      	ldrb	r2, [r7, #3]
 8007bc2:	b292      	uxth	r2, r2
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	f000 f918 	bl	8007dfa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af02      	add	r7, sp, #8
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	331c      	adds	r3, #28
 8007be4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007be6:	887b      	ldrh	r3, [r7, #2]
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f83d 	bl	8007c72 <USBH_GetDescriptor>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	72fb      	strb	r3, [r7, #11]
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d107      	bne.n	8007c12 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c08:	887a      	ldrh	r2, [r7, #2]
 8007c0a:	68f9      	ldr	r1, [r7, #12]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 f964 	bl	8007eda <USBH_ParseCfgDesc>
  }

  return status;
 8007c12:	7afb      	ldrb	r3, [r7, #11]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	607a      	str	r2, [r7, #4]
 8007c26:	461a      	mov	r2, r3
 8007c28:	460b      	mov	r3, r1
 8007c2a:	72fb      	strb	r3, [r7, #11]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007c30:	7afb      	ldrb	r3, [r7, #11]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c38:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007c40:	893b      	ldrh	r3, [r7, #8]
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	460b      	mov	r3, r1
 8007c46:	2100      	movs	r1, #0
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 f812 	bl	8007c72 <USBH_GetDescriptor>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	75fb      	strb	r3, [r7, #23]
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d107      	bne.n	8007c68 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c5e:	893a      	ldrh	r2, [r7, #8]
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fa37 	bl	80080d6 <USBH_ParseStringDesc>
  }

  return status;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	607b      	str	r3, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	72fb      	strb	r3, [r7, #11]
 8007c80:	4613      	mov	r3, r2
 8007c82:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	789b      	ldrb	r3, [r3, #2]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d11c      	bne.n	8007cc6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2206      	movs	r2, #6
 8007c9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	893a      	ldrh	r2, [r7, #8]
 8007ca2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ca4:	893b      	ldrh	r3, [r7, #8]
 8007ca6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cae:	d104      	bne.n	8007cba <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f240 4209 	movw	r2, #1033	; 0x409
 8007cb6:	829a      	strh	r2, [r3, #20]
 8007cb8:	e002      	b.n	8007cc0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8b3a      	ldrh	r2, [r7, #24]
 8007cc4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007cc6:	8b3b      	ldrh	r3, [r7, #24]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fa50 	bl	8008172 <USBH_CtlReq>
 8007cd2:	4603      	mov	r3, r0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	789b      	ldrb	r3, [r3, #2]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d10f      	bne.n	8007d10 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2205      	movs	r2, #5
 8007cfa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d10:	2200      	movs	r2, #0
 8007d12:	2100      	movs	r1, #0
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fa2c 	bl	8008172 <USBH_CtlReq>
 8007d1a:	4603      	mov	r3, r0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	789b      	ldrb	r3, [r3, #2]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d10e      	bne.n	8007d56 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2209      	movs	r2, #9
 8007d42:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	887a      	ldrh	r2, [r7, #2]
 8007d48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d56:	2200      	movs	r2, #0
 8007d58:	2100      	movs	r1, #0
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fa09 	bl	8008172 <USBH_CtlReq>
 8007d60:	4603      	mov	r3, r0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	789b      	ldrb	r3, [r3, #2]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d10f      	bne.n	8007d9e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2203      	movs	r2, #3
 8007d88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2100      	movs	r1, #0
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f9e5 	bl	8008172 <USBH_CtlReq>
 8007da8:	4603      	mov	r3, r0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	789b      	ldrb	r3, [r3, #2]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d10f      	bne.n	8007de6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007de6:	2200      	movs	r2, #0
 8007de8:	2100      	movs	r1, #0
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f9c1 	bl	8008172 <USBH_CtlReq>
 8007df0:	4603      	mov	r3, r0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b085      	sub	sp, #20
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	4613      	mov	r3, r2
 8007e06:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	785a      	ldrb	r2, [r3, #1]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	3302      	adds	r3, #2
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	3303      	adds	r3, #3
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	791a      	ldrb	r2, [r3, #4]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	795a      	ldrb	r2, [r3, #5]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	799a      	ldrb	r2, [r3, #6]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	79da      	ldrb	r2, [r3, #7]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	2b08      	cmp	r3, #8
 8007e58:	d939      	bls.n	8007ece <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	3309      	adds	r3, #9
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	330a      	adds	r3, #10
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	330b      	adds	r3, #11
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	021b      	lsls	r3, r3, #8
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	330c      	adds	r3, #12
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	330d      	adds	r3, #13
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	7b9a      	ldrb	r2, [r3, #14]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	7bda      	ldrb	r2, [r3, #15]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	7c1a      	ldrb	r2, [r3, #16]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	7c5a      	ldrb	r2, [r3, #17]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	745a      	strb	r2, [r3, #17]
  }
}
 8007ece:	bf00      	nop
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b08a      	sub	sp, #40	; 0x28
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	781a      	ldrb	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	785a      	ldrb	r2, [r3, #1]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	3302      	adds	r3, #2
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	3303      	adds	r3, #3
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	021b      	lsls	r3, r3, #8
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	4313      	orrs	r3, r2
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	791a      	ldrb	r2, [r3, #4]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	795a      	ldrb	r2, [r3, #5]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	799a      	ldrb	r2, [r3, #6]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	79da      	ldrb	r2, [r3, #7]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	7a1a      	ldrb	r2, [r3, #8]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f50:	88fb      	ldrh	r3, [r7, #6]
 8007f52:	2b09      	cmp	r3, #9
 8007f54:	d95f      	bls.n	8008016 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f56:	2309      	movs	r3, #9
 8007f58:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f5e:	e051      	b.n	8008004 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f60:	f107 0316 	add.w	r3, r7, #22
 8007f64:	4619      	mov	r1, r3
 8007f66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f68:	f000 f8e8 	bl	800813c <USBH_GetNextDesc>
 8007f6c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	785b      	ldrb	r3, [r3, #1]
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d146      	bne.n	8008004 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f7a:	221a      	movs	r2, #26
 8007f7c:	fb02 f303 	mul.w	r3, r2, r3
 8007f80:	3308      	adds	r3, #8
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4413      	add	r3, r2
 8007f86:	3302      	adds	r3, #2
 8007f88:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f8c:	69f8      	ldr	r0, [r7, #28]
 8007f8e:	f000 f846 	bl	800801e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f9c:	e022      	b.n	8007fe4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f9e:	f107 0316 	add.w	r3, r7, #22
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fa6:	f000 f8c9 	bl	800813c <USBH_GetNextDesc>
 8007faa:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	2b05      	cmp	r3, #5
 8007fb2:	d117      	bne.n	8007fe4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fb8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007fbc:	3201      	adds	r2, #1
 8007fbe:	00d2      	lsls	r2, r2, #3
 8007fc0:	211a      	movs	r1, #26
 8007fc2:	fb01 f303 	mul.w	r3, r1, r3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	3308      	adds	r3, #8
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	4413      	add	r3, r2
 8007fce:	3304      	adds	r3, #4
 8007fd0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007fd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fd4:	69b8      	ldr	r0, [r7, #24]
 8007fd6:	f000 f851 	bl	800807c <USBH_ParseEPDesc>
            ep_ix++;
 8007fda:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007fde:	3301      	adds	r3, #1
 8007fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	791b      	ldrb	r3, [r3, #4]
 8007fe8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d204      	bcs.n	8007ffa <USBH_ParseCfgDesc+0x120>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	885a      	ldrh	r2, [r3, #2]
 8007ff4:	8afb      	ldrh	r3, [r7, #22]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d8d1      	bhi.n	8007f9e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007ffa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ffe:	3301      	adds	r3, #1
 8008000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008004:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008008:	2b01      	cmp	r3, #1
 800800a:	d804      	bhi.n	8008016 <USBH_ParseCfgDesc+0x13c>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	885a      	ldrh	r2, [r3, #2]
 8008010:	8afb      	ldrh	r3, [r7, #22]
 8008012:	429a      	cmp	r2, r3
 8008014:	d8a4      	bhi.n	8007f60 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008016:	bf00      	nop
 8008018:	3728      	adds	r7, #40	; 0x28
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781a      	ldrb	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	785a      	ldrb	r2, [r3, #1]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	789a      	ldrb	r2, [r3, #2]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	78da      	ldrb	r2, [r3, #3]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	791a      	ldrb	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	795a      	ldrb	r2, [r3, #5]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	799a      	ldrb	r2, [r3, #6]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	79da      	ldrb	r2, [r3, #7]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	7a1a      	ldrb	r2, [r3, #8]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	721a      	strb	r2, [r3, #8]
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	785a      	ldrb	r2, [r3, #1]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	789a      	ldrb	r2, [r3, #2]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	78da      	ldrb	r2, [r3, #3]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	3304      	adds	r3, #4
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	3305      	adds	r3, #5
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	021b      	lsls	r3, r3, #8
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	4313      	orrs	r3, r2
 80080bc:	b29a      	uxth	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	799a      	ldrb	r2, [r3, #6]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	719a      	strb	r2, [r3, #6]
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b087      	sub	sp, #28
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	4613      	mov	r3, r2
 80080e2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3301      	adds	r3, #1
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d120      	bne.n	8008130 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	1e9a      	subs	r2, r3, #2
 80080f4:	88fb      	ldrh	r3, [r7, #6]
 80080f6:	4293      	cmp	r3, r2
 80080f8:	bf28      	it	cs
 80080fa:	4613      	movcs	r3, r2
 80080fc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3302      	adds	r3, #2
 8008102:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008104:	2300      	movs	r3, #0
 8008106:	82fb      	strh	r3, [r7, #22]
 8008108:	e00b      	b.n	8008122 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800810a:	8afb      	ldrh	r3, [r7, #22]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4413      	add	r3, r2
 8008110:	781a      	ldrb	r2, [r3, #0]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	3301      	adds	r3, #1
 800811a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800811c:	8afb      	ldrh	r3, [r7, #22]
 800811e:	3302      	adds	r3, #2
 8008120:	82fb      	strh	r3, [r7, #22]
 8008122:	8afa      	ldrh	r2, [r7, #22]
 8008124:	8abb      	ldrh	r3, [r7, #20]
 8008126:	429a      	cmp	r2, r3
 8008128:	d3ef      	bcc.n	800810a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2200      	movs	r2, #0
 800812e:	701a      	strb	r2, [r3, #0]
  }
}
 8008130:	bf00      	nop
 8008132:	371c      	adds	r7, #28
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	881a      	ldrh	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	4413      	add	r3, r2
 8008152:	b29a      	uxth	r2, r3
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4413      	add	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008164:	68fb      	ldr	r3, [r7, #12]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b086      	sub	sp, #24
 8008176:	af00      	add	r7, sp, #0
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	4613      	mov	r3, r2
 800817e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008180:	2301      	movs	r3, #1
 8008182:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	789b      	ldrb	r3, [r3, #2]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d002      	beq.n	8008192 <USBH_CtlReq+0x20>
 800818c:	2b02      	cmp	r3, #2
 800818e:	d00f      	beq.n	80081b0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008190:	e027      	b.n	80081e2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	88fa      	ldrh	r2, [r7, #6]
 800819c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2202      	movs	r2, #2
 80081a8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081aa:	2301      	movs	r3, #1
 80081ac:	75fb      	strb	r3, [r7, #23]
      break;
 80081ae:	e018      	b.n	80081e2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 f81b 	bl	80081ec <USBH_HandleControl>
 80081b6:	4603      	mov	r3, r0
 80081b8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <USBH_CtlReq+0x54>
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d106      	bne.n	80081d4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2201      	movs	r2, #1
 80081ca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	761a      	strb	r2, [r3, #24]
      break;
 80081d2:	e005      	b.n	80081e0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d102      	bne.n	80081e0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	709a      	strb	r2, [r3, #2]
      break;
 80081e0:	bf00      	nop
  }
  return status;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80081f4:	2301      	movs	r3, #1
 80081f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	7e1b      	ldrb	r3, [r3, #24]
 8008200:	3b01      	subs	r3, #1
 8008202:	2b0a      	cmp	r3, #10
 8008204:	f200 8156 	bhi.w	80084b4 <USBH_HandleControl+0x2c8>
 8008208:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <USBH_HandleControl+0x24>)
 800820a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820e:	bf00      	nop
 8008210:	0800823d 	.word	0x0800823d
 8008214:	08008257 	.word	0x08008257
 8008218:	080082c1 	.word	0x080082c1
 800821c:	080082e7 	.word	0x080082e7
 8008220:	0800831f 	.word	0x0800831f
 8008224:	08008349 	.word	0x08008349
 8008228:	0800839b 	.word	0x0800839b
 800822c:	080083bd 	.word	0x080083bd
 8008230:	080083f9 	.word	0x080083f9
 8008234:	0800841f 	.word	0x0800841f
 8008238:	0800845d 	.word	0x0800845d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f103 0110 	add.w	r1, r3, #16
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	795b      	ldrb	r3, [r3, #5]
 8008246:	461a      	mov	r2, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f943 	bl	80084d4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2202      	movs	r2, #2
 8008252:	761a      	strb	r2, [r3, #24]
      break;
 8008254:	e139      	b.n	80084ca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	795b      	ldrb	r3, [r3, #5]
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fcc5 	bl	8008bec <USBH_LL_GetURBState>
 8008262:	4603      	mov	r3, r0
 8008264:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d11e      	bne.n	80082aa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	7c1b      	ldrb	r3, [r3, #16]
 8008270:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008274:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8adb      	ldrh	r3, [r3, #22]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800827e:	7b7b      	ldrb	r3, [r7, #13]
 8008280:	2b80      	cmp	r3, #128	; 0x80
 8008282:	d103      	bne.n	800828c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2203      	movs	r2, #3
 8008288:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800828a:	e115      	b.n	80084b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2205      	movs	r2, #5
 8008290:	761a      	strb	r2, [r3, #24]
      break;
 8008292:	e111      	b.n	80084b8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008294:	7b7b      	ldrb	r3, [r7, #13]
 8008296:	2b80      	cmp	r3, #128	; 0x80
 8008298:	d103      	bne.n	80082a2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2209      	movs	r2, #9
 800829e:	761a      	strb	r2, [r3, #24]
      break;
 80082a0:	e10a      	b.n	80084b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2207      	movs	r2, #7
 80082a6:	761a      	strb	r2, [r3, #24]
      break;
 80082a8:	e106      	b.n	80084b8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d003      	beq.n	80082b8 <USBH_HandleControl+0xcc>
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	f040 8100 	bne.w	80084b8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	220b      	movs	r2, #11
 80082bc:	761a      	strb	r2, [r3, #24]
      break;
 80082be:	e0fb      	b.n	80084b8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6899      	ldr	r1, [r3, #8]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	899a      	ldrh	r2, [r3, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	791b      	ldrb	r3, [r3, #4]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f93a 	bl	8008552 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2204      	movs	r2, #4
 80082e2:	761a      	strb	r2, [r3, #24]
      break;
 80082e4:	e0f1      	b.n	80084ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	791b      	ldrb	r3, [r3, #4]
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fc7d 	bl	8008bec <USBH_LL_GetURBState>
 80082f2:	4603      	mov	r3, r0
 80082f4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d102      	bne.n	8008302 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2209      	movs	r2, #9
 8008300:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b05      	cmp	r3, #5
 8008306:	d102      	bne.n	800830e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008308:	2303      	movs	r3, #3
 800830a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800830c:	e0d6      	b.n	80084bc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	2b04      	cmp	r3, #4
 8008312:	f040 80d3 	bne.w	80084bc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	220b      	movs	r2, #11
 800831a:	761a      	strb	r2, [r3, #24]
      break;
 800831c:	e0ce      	b.n	80084bc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6899      	ldr	r1, [r3, #8]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	899a      	ldrh	r2, [r3, #12]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	795b      	ldrb	r3, [r3, #5]
 800832a:	2001      	movs	r0, #1
 800832c:	9000      	str	r0, [sp, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f8ea 	bl	8008508 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800833a:	b29a      	uxth	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2206      	movs	r2, #6
 8008344:	761a      	strb	r2, [r3, #24]
      break;
 8008346:	e0c0      	b.n	80084ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	795b      	ldrb	r3, [r3, #5]
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fc4c 	bl	8008bec <USBH_LL_GetURBState>
 8008354:	4603      	mov	r3, r0
 8008356:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d103      	bne.n	8008366 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2207      	movs	r2, #7
 8008362:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008364:	e0ac      	b.n	80084c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b05      	cmp	r3, #5
 800836a:	d105      	bne.n	8008378 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	220c      	movs	r2, #12
 8008370:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008372:	2303      	movs	r3, #3
 8008374:	73fb      	strb	r3, [r7, #15]
      break;
 8008376:	e0a3      	b.n	80084c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	2b02      	cmp	r3, #2
 800837c:	d103      	bne.n	8008386 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2205      	movs	r2, #5
 8008382:	761a      	strb	r2, [r3, #24]
      break;
 8008384:	e09c      	b.n	80084c0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b04      	cmp	r3, #4
 800838a:	f040 8099 	bne.w	80084c0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	220b      	movs	r2, #11
 8008392:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008394:	2302      	movs	r3, #2
 8008396:	73fb      	strb	r3, [r7, #15]
      break;
 8008398:	e092      	b.n	80084c0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	791b      	ldrb	r3, [r3, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	2100      	movs	r1, #0
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f8d5 	bl	8008552 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2208      	movs	r2, #8
 80083b8:	761a      	strb	r2, [r3, #24]

      break;
 80083ba:	e086      	b.n	80084ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	791b      	ldrb	r3, [r3, #4]
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fc12 	bl	8008bec <USBH_LL_GetURBState>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d105      	bne.n	80083de <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	220d      	movs	r2, #13
 80083d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083dc:	e072      	b.n	80084c4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d103      	bne.n	80083ec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	220b      	movs	r2, #11
 80083e8:	761a      	strb	r2, [r3, #24]
      break;
 80083ea:	e06b      	b.n	80084c4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d168      	bne.n	80084c4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80083f2:	2303      	movs	r3, #3
 80083f4:	73fb      	strb	r3, [r7, #15]
      break;
 80083f6:	e065      	b.n	80084c4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	795b      	ldrb	r3, [r3, #5]
 80083fc:	2201      	movs	r2, #1
 80083fe:	9200      	str	r2, [sp, #0]
 8008400:	2200      	movs	r2, #0
 8008402:	2100      	movs	r1, #0
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f87f 	bl	8008508 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	220a      	movs	r2, #10
 800841a:	761a      	strb	r2, [r3, #24]
      break;
 800841c:	e055      	b.n	80084ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	795b      	ldrb	r3, [r3, #5]
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fbe1 	bl	8008bec <USBH_LL_GetURBState>
 800842a:	4603      	mov	r3, r0
 800842c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d105      	bne.n	8008440 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	220d      	movs	r2, #13
 800843c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800843e:	e043      	b.n	80084c8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008440:	7bbb      	ldrb	r3, [r7, #14]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d103      	bne.n	800844e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2209      	movs	r2, #9
 800844a:	761a      	strb	r2, [r3, #24]
      break;
 800844c:	e03c      	b.n	80084c8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b04      	cmp	r3, #4
 8008452:	d139      	bne.n	80084c8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	220b      	movs	r2, #11
 8008458:	761a      	strb	r2, [r3, #24]
      break;
 800845a:	e035      	b.n	80084c8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7e5b      	ldrb	r3, [r3, #25]
 8008460:	3301      	adds	r3, #1
 8008462:	b2da      	uxtb	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	765a      	strb	r2, [r3, #25]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	7e5b      	ldrb	r3, [r3, #25]
 800846c:	2b02      	cmp	r3, #2
 800846e:	d806      	bhi.n	800847e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800847c:	e025      	b.n	80084ca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008484:	2106      	movs	r1, #6
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	795b      	ldrb	r3, [r3, #5]
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f90c 	bl	80086b4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	791b      	ldrb	r3, [r3, #4]
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f906 	bl	80086b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80084ae:	2302      	movs	r3, #2
 80084b0:	73fb      	strb	r3, [r7, #15]
      break;
 80084b2:	e00a      	b.n	80084ca <USBH_HandleControl+0x2de>

    default:
      break;
 80084b4:	bf00      	nop
 80084b6:	e008      	b.n	80084ca <USBH_HandleControl+0x2de>
      break;
 80084b8:	bf00      	nop
 80084ba:	e006      	b.n	80084ca <USBH_HandleControl+0x2de>
      break;
 80084bc:	bf00      	nop
 80084be:	e004      	b.n	80084ca <USBH_HandleControl+0x2de>
      break;
 80084c0:	bf00      	nop
 80084c2:	e002      	b.n	80084ca <USBH_HandleControl+0x2de>
      break;
 80084c4:	bf00      	nop
 80084c6:	e000      	b.n	80084ca <USBH_HandleControl+0x2de>
      break;
 80084c8:	bf00      	nop
  }

  return status;
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af04      	add	r7, sp, #16
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084e2:	79f9      	ldrb	r1, [r7, #7]
 80084e4:	2300      	movs	r3, #0
 80084e6:	9303      	str	r3, [sp, #12]
 80084e8:	2308      	movs	r3, #8
 80084ea:	9302      	str	r3, [sp, #8]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	2300      	movs	r3, #0
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	2300      	movs	r3, #0
 80084f6:	2200      	movs	r2, #0
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 fb46 	bl	8008b8a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af04      	add	r7, sp, #16
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4611      	mov	r1, r2
 8008514:	461a      	mov	r2, r3
 8008516:	460b      	mov	r3, r1
 8008518:	80fb      	strh	r3, [r7, #6]
 800851a:	4613      	mov	r3, r2
 800851c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800852c:	7979      	ldrb	r1, [r7, #5]
 800852e:	7e3b      	ldrb	r3, [r7, #24]
 8008530:	9303      	str	r3, [sp, #12]
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	9302      	str	r3, [sp, #8]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	2301      	movs	r3, #1
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	2300      	movs	r3, #0
 8008540:	2200      	movs	r2, #0
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f000 fb21 	bl	8008b8a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b088      	sub	sp, #32
 8008556:	af04      	add	r7, sp, #16
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	60b9      	str	r1, [r7, #8]
 800855c:	4611      	mov	r1, r2
 800855e:	461a      	mov	r2, r3
 8008560:	460b      	mov	r3, r1
 8008562:	80fb      	strh	r3, [r7, #6]
 8008564:	4613      	mov	r3, r2
 8008566:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008568:	7979      	ldrb	r1, [r7, #5]
 800856a:	2300      	movs	r3, #0
 800856c:	9303      	str	r3, [sp, #12]
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	9302      	str	r3, [sp, #8]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	2301      	movs	r3, #1
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	2300      	movs	r3, #0
 800857c:	2201      	movs	r2, #1
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 fb03 	bl	8008b8a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008584:	2300      	movs	r3, #0

}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b088      	sub	sp, #32
 8008592:	af04      	add	r7, sp, #16
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	4611      	mov	r1, r2
 800859a:	461a      	mov	r2, r3
 800859c:	460b      	mov	r3, r1
 800859e:	80fb      	strh	r3, [r7, #6]
 80085a0:	4613      	mov	r3, r2
 80085a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085b2:	7979      	ldrb	r1, [r7, #5]
 80085b4:	7e3b      	ldrb	r3, [r7, #24]
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	88fb      	ldrh	r3, [r7, #6]
 80085ba:	9302      	str	r3, [sp, #8]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	2301      	movs	r3, #1
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	2302      	movs	r3, #2
 80085c6:	2200      	movs	r2, #0
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f000 fade 	bl	8008b8a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b088      	sub	sp, #32
 80085dc:	af04      	add	r7, sp, #16
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4611      	mov	r1, r2
 80085e4:	461a      	mov	r2, r3
 80085e6:	460b      	mov	r3, r1
 80085e8:	80fb      	strh	r3, [r7, #6]
 80085ea:	4613      	mov	r3, r2
 80085ec:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085ee:	7979      	ldrb	r1, [r7, #5]
 80085f0:	2300      	movs	r3, #0
 80085f2:	9303      	str	r3, [sp, #12]
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	9302      	str	r3, [sp, #8]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	2301      	movs	r3, #1
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	2302      	movs	r3, #2
 8008602:	2201      	movs	r2, #1
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 fac0 	bl	8008b8a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af04      	add	r7, sp, #16
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	4608      	mov	r0, r1
 800861e:	4611      	mov	r1, r2
 8008620:	461a      	mov	r2, r3
 8008622:	4603      	mov	r3, r0
 8008624:	70fb      	strb	r3, [r7, #3]
 8008626:	460b      	mov	r3, r1
 8008628:	70bb      	strb	r3, [r7, #2]
 800862a:	4613      	mov	r3, r2
 800862c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800862e:	7878      	ldrb	r0, [r7, #1]
 8008630:	78ba      	ldrb	r2, [r7, #2]
 8008632:	78f9      	ldrb	r1, [r7, #3]
 8008634:	8b3b      	ldrh	r3, [r7, #24]
 8008636:	9302      	str	r3, [sp, #8]
 8008638:	7d3b      	ldrb	r3, [r7, #20]
 800863a:	9301      	str	r3, [sp, #4]
 800863c:	7c3b      	ldrb	r3, [r7, #16]
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	4603      	mov	r3, r0
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa53 	bl	8008aee <USBH_LL_OpenPipe>

  return USBH_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b082      	sub	sp, #8
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fa72 	bl	8008b4c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b084      	sub	sp, #16
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	460b      	mov	r3, r1
 800867c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f836 	bl	80086f0 <USBH_GetFreePipe>
 8008684:	4603      	mov	r3, r0
 8008686:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008688:	89fb      	ldrh	r3, [r7, #14]
 800868a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800868e:	4293      	cmp	r3, r2
 8008690:	d00a      	beq.n	80086a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008692:	78fa      	ldrb	r2, [r7, #3]
 8008694:	89fb      	ldrh	r3, [r7, #14]
 8008696:	f003 030f 	and.w	r3, r3, #15
 800869a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	33e0      	adds	r3, #224	; 0xe0
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	440b      	add	r3, r1
 80086a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80086a8:	89fb      	ldrh	r3, [r7, #14]
 80086aa:	b2db      	uxtb	r3, r3
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	2b0a      	cmp	r3, #10
 80086c4:	d80d      	bhi.n	80086e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	33e0      	adds	r3, #224	; 0xe0
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	33e0      	adds	r3, #224	; 0xe0
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
 8008700:	e00f      	b.n	8008722 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	33e0      	adds	r3, #224	; 0xe0
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d102      	bne.n	800871c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	b29b      	uxth	r3, r3
 800871a:	e007      	b.n	800872c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	3301      	adds	r3, #1
 8008720:	73fb      	strb	r3, [r7, #15]
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	2b0a      	cmp	r3, #10
 8008726:	d9ec      	bls.n	8008702 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008728:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800873c:	2201      	movs	r2, #1
 800873e:	490e      	ldr	r1, [pc, #56]	; (8008778 <MX_USB_HOST_Init+0x40>)
 8008740:	480e      	ldr	r0, [pc, #56]	; (800877c <MX_USB_HOST_Init+0x44>)
 8008742:	f7fe fca1 	bl	8007088 <USBH_Init>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800874c:	f7f8 fdcc 	bl	80012e8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008750:	490b      	ldr	r1, [pc, #44]	; (8008780 <MX_USB_HOST_Init+0x48>)
 8008752:	480a      	ldr	r0, [pc, #40]	; (800877c <MX_USB_HOST_Init+0x44>)
 8008754:	f7fe fd26 	bl	80071a4 <USBH_RegisterClass>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800875e:	f7f8 fdc3 	bl	80012e8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008762:	4806      	ldr	r0, [pc, #24]	; (800877c <MX_USB_HOST_Init+0x44>)
 8008764:	f7fe fdaa 	bl	80072bc <USBH_Start>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800876e:	f7f8 fdbb 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008772:	bf00      	nop
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	08008799 	.word	0x08008799
 800877c:	200001f4 	.word	0x200001f4
 8008780:	2000000c 	.word	0x2000000c

08008784 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008788:	4802      	ldr	r0, [pc, #8]	; (8008794 <MX_USB_HOST_Process+0x10>)
 800878a:	f7fe fda7 	bl	80072dc <USBH_Process>
}
 800878e:	bf00      	nop
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	200001f4 	.word	0x200001f4

08008798 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d819      	bhi.n	80087e0 <USBH_UserProcess+0x48>
 80087ac:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <USBH_UserProcess+0x1c>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087e1 	.word	0x080087e1
 80087b8:	080087d1 	.word	0x080087d1
 80087bc:	080087e1 	.word	0x080087e1
 80087c0:	080087d9 	.word	0x080087d9
 80087c4:	080087c9 	.word	0x080087c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80087c8:	4b09      	ldr	r3, [pc, #36]	; (80087f0 <USBH_UserProcess+0x58>)
 80087ca:	2203      	movs	r2, #3
 80087cc:	701a      	strb	r2, [r3, #0]
  break;
 80087ce:	e008      	b.n	80087e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80087d0:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <USBH_UserProcess+0x58>)
 80087d2:	2202      	movs	r2, #2
 80087d4:	701a      	strb	r2, [r3, #0]
  break;
 80087d6:	e004      	b.n	80087e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80087d8:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <USBH_UserProcess+0x58>)
 80087da:	2201      	movs	r2, #1
 80087dc:	701a      	strb	r2, [r3, #0]
  break;
 80087de:	e000      	b.n	80087e2 <USBH_UserProcess+0x4a>

  default:
  break;
 80087e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	200000b4 	.word	0x200000b4

080087f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08a      	sub	sp, #40	; 0x28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087fc:	f107 0314 	add.w	r3, r7, #20
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	605a      	str	r2, [r3, #4]
 8008806:	609a      	str	r2, [r3, #8]
 8008808:	60da      	str	r2, [r3, #12]
 800880a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008814:	d147      	bne.n	80088a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008816:	2300      	movs	r3, #0
 8008818:	613b      	str	r3, [r7, #16]
 800881a:	4b25      	ldr	r3, [pc, #148]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 800881c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881e:	4a24      	ldr	r2, [pc, #144]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 8008820:	f043 0301 	orr.w	r3, r3, #1
 8008824:	6313      	str	r3, [r2, #48]	; 0x30
 8008826:	4b22      	ldr	r3, [pc, #136]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 8008828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008838:	2300      	movs	r3, #0
 800883a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800883c:	2300      	movs	r3, #0
 800883e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008840:	f107 0314 	add.w	r3, r7, #20
 8008844:	4619      	mov	r1, r3
 8008846:	481b      	ldr	r0, [pc, #108]	; (80088b4 <HAL_HCD_MspInit+0xc0>)
 8008848:	f7f9 f8c2 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800884c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008852:	2302      	movs	r3, #2
 8008854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008856:	2300      	movs	r3, #0
 8008858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800885a:	2300      	movs	r3, #0
 800885c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800885e:	230a      	movs	r3, #10
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008862:	f107 0314 	add.w	r3, r7, #20
 8008866:	4619      	mov	r1, r3
 8008868:	4812      	ldr	r0, [pc, #72]	; (80088b4 <HAL_HCD_MspInit+0xc0>)
 800886a:	f7f9 f8b1 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800886e:	4b10      	ldr	r3, [pc, #64]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 8008870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008872:	4a0f      	ldr	r2, [pc, #60]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 8008874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008878:	6353      	str	r3, [r2, #52]	; 0x34
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
 800887e:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 8008880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008882:	4a0b      	ldr	r2, [pc, #44]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 8008884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008888:	6453      	str	r3, [r2, #68]	; 0x44
 800888a:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <HAL_HCD_MspInit+0xbc>)
 800888c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008896:	2200      	movs	r2, #0
 8008898:	2100      	movs	r1, #0
 800889a:	2043      	movs	r0, #67	; 0x43
 800889c:	f7f9 f861 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088a0:	2043      	movs	r0, #67	; 0x43
 80088a2:	f7f9 f87a 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088a6:	bf00      	nop
 80088a8:	3728      	adds	r7, #40	; 0x28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	40023800 	.word	0x40023800
 80088b4:	40020000 	.word	0x40020000

080088b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff f8db 	bl	8007a82 <USBH_LL_IncTimer>
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7ff f913 	bl	8007b0e <USBH_LL_Connect>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff f91c 	bl	8007b3c <USBH_LL_Disconnect>
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	70fb      	strb	r3, [r7, #3]
 8008918:	4613      	mov	r3, r2
 800891a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008936:	4618      	mov	r0, r3
 8008938:	f7ff f8cd 	bl	8007ad6 <USBH_LL_PortEnabled>
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff f8cd 	bl	8007af2 <USBH_LL_PortDisabled>
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800896e:	2b01      	cmp	r3, #1
 8008970:	d12a      	bne.n	80089c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008972:	4a18      	ldr	r2, [pc, #96]	; (80089d4 <USBH_LL_Init+0x74>)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a15      	ldr	r2, [pc, #84]	; (80089d4 <USBH_LL_Init+0x74>)
 800897e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008982:	4b14      	ldr	r3, [pc, #80]	; (80089d4 <USBH_LL_Init+0x74>)
 8008984:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008988:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800898a:	4b12      	ldr	r3, [pc, #72]	; (80089d4 <USBH_LL_Init+0x74>)
 800898c:	2208      	movs	r2, #8
 800898e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008990:	4b10      	ldr	r3, [pc, #64]	; (80089d4 <USBH_LL_Init+0x74>)
 8008992:	2201      	movs	r2, #1
 8008994:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008996:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <USBH_LL_Init+0x74>)
 8008998:	2200      	movs	r2, #0
 800899a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800899c:	4b0d      	ldr	r3, [pc, #52]	; (80089d4 <USBH_LL_Init+0x74>)
 800899e:	2202      	movs	r2, #2
 80089a0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089a2:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <USBH_LL_Init+0x74>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80089a8:	480a      	ldr	r0, [pc, #40]	; (80089d4 <USBH_LL_Init+0x74>)
 80089aa:	f7f9 f9c6 	bl	8001d3a <HAL_HCD_Init>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80089b4:	f7f8 fc98 	bl	80012e8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80089b8:	4806      	ldr	r0, [pc, #24]	; (80089d4 <USBH_LL_Init+0x74>)
 80089ba:	f7f9 fda3 	bl	8002504 <HAL_HCD_GetCurrentFrame>
 80089be:	4603      	mov	r3, r0
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff f84e 	bl	8007a64 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	200005cc 	.word	0x200005cc

080089d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7f9 fd12 	bl	8002418 <HAL_HCD_Start>
 80089f4:	4603      	mov	r3, r0
 80089f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 f95c 	bl	8008cb8 <USBH_Get_USB_Status>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7f9 fd1a 	bl	800245e <HAL_HCD_Stop>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 f941 	bl	8008cb8 <USBH_Get_USB_Status>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7f9 fd62 	bl	8002520 <HAL_HCD_GetCurrentSpeed>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d00c      	beq.n	8008a7c <USBH_LL_GetSpeed+0x38>
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d80d      	bhi.n	8008a82 <USBH_LL_GetSpeed+0x3e>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <USBH_LL_GetSpeed+0x2c>
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d003      	beq.n	8008a76 <USBH_LL_GetSpeed+0x32>
 8008a6e:	e008      	b.n	8008a82 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]
    break;
 8008a74:	e008      	b.n	8008a88 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a76:	2301      	movs	r3, #1
 8008a78:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7a:	e005      	b.n	8008a88 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a80:	e002      	b.n	8008a88 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008a82:	2301      	movs	r3, #1
 8008a84:	73fb      	strb	r3, [r7, #15]
    break;
 8008a86:	bf00      	nop
  }
  return  speed;
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7f9 fcf5 	bl	8002498 <HAL_HCD_ResetPort>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 f8ff 	bl	8008cb8 <USBH_Get_USB_Status>
 8008aba:	4603      	mov	r3, r0
 8008abc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ada:	78fa      	ldrb	r2, [r7, #3]
 8008adc:	4611      	mov	r1, r2
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7f9 fcfc 	bl	80024dc <HAL_HCD_HC_GetXferCount>
 8008ae4:	4603      	mov	r3, r0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008aee:	b590      	push	{r4, r7, lr}
 8008af0:	b089      	sub	sp, #36	; 0x24
 8008af2:	af04      	add	r7, sp, #16
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	4608      	mov	r0, r1
 8008af8:	4611      	mov	r1, r2
 8008afa:	461a      	mov	r2, r3
 8008afc:	4603      	mov	r3, r0
 8008afe:	70fb      	strb	r3, [r7, #3]
 8008b00:	460b      	mov	r3, r1
 8008b02:	70bb      	strb	r3, [r7, #2]
 8008b04:	4613      	mov	r3, r2
 8008b06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b16:	787c      	ldrb	r4, [r7, #1]
 8008b18:	78ba      	ldrb	r2, [r7, #2]
 8008b1a:	78f9      	ldrb	r1, [r7, #3]
 8008b1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b1e:	9302      	str	r3, [sp, #8]
 8008b20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	4623      	mov	r3, r4
 8008b2e:	f7f9 f966 	bl	8001dfe <HAL_HCD_HC_Init>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 f8bd 	bl	8008cb8 <USBH_Get_USB_Status>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd90      	pop	{r4, r7, pc}

08008b4c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b66:	78fa      	ldrb	r2, [r7, #3]
 8008b68:	4611      	mov	r1, r2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7f9 f9d6 	bl	8001f1c <HAL_HCD_HC_Halt>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 f89e 	bl	8008cb8 <USBH_Get_USB_Status>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b8a:	b590      	push	{r4, r7, lr}
 8008b8c:	b089      	sub	sp, #36	; 0x24
 8008b8e:	af04      	add	r7, sp, #16
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	4608      	mov	r0, r1
 8008b94:	4611      	mov	r1, r2
 8008b96:	461a      	mov	r2, r3
 8008b98:	4603      	mov	r3, r0
 8008b9a:	70fb      	strb	r3, [r7, #3]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70bb      	strb	r3, [r7, #2]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bb2:	787c      	ldrb	r4, [r7, #1]
 8008bb4:	78ba      	ldrb	r2, [r7, #2]
 8008bb6:	78f9      	ldrb	r1, [r7, #3]
 8008bb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bbc:	9303      	str	r3, [sp, #12]
 8008bbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bc0:	9302      	str	r3, [sp, #8]
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	4623      	mov	r3, r4
 8008bce:	f7f9 f9c9 	bl	8001f64 <HAL_HCD_HC_SubmitRequest>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 f86d 	bl	8008cb8 <USBH_Get_USB_Status>
 8008bde:	4603      	mov	r3, r0
 8008be0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd90      	pop	{r4, r7, pc}

08008bec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7f9 fc56 	bl	80024b4 <HAL_HCD_HC_GetURBState>
 8008c08:	4603      	mov	r3, r0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d103      	bne.n	8008c30 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 f870 	bl	8008d10 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c30:	20c8      	movs	r0, #200	; 0xc8
 8008c32:	f7f8 fd97 	bl	8001764 <HAL_Delay>
  return USBH_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70fb      	strb	r3, [r7, #3]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c56:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c58:	78fb      	ldrb	r3, [r7, #3]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	212c      	movs	r1, #44	; 0x2c
 8008c5e:	fb01 f303 	mul.w	r3, r1, r3
 8008c62:	4413      	add	r3, r2
 8008c64:	333b      	adds	r3, #59	; 0x3b
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	212c      	movs	r1, #44	; 0x2c
 8008c72:	fb01 f303 	mul.w	r3, r1, r3
 8008c76:	4413      	add	r3, r2
 8008c78:	3354      	adds	r3, #84	; 0x54
 8008c7a:	78ba      	ldrb	r2, [r7, #2]
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	e008      	b.n	8008c92 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	212c      	movs	r1, #44	; 0x2c
 8008c86:	fb01 f303 	mul.w	r3, r1, r3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3355      	adds	r3, #85	; 0x55
 8008c8e:	78ba      	ldrb	r2, [r7, #2]
 8008c90:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7f8 fd5b 	bl	8001764 <HAL_Delay>
}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
	...

08008cb8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cc6:	79fb      	ldrb	r3, [r7, #7]
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d817      	bhi.n	8008cfc <USBH_Get_USB_Status+0x44>
 8008ccc:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <USBH_Get_USB_Status+0x1c>)
 8008cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd2:	bf00      	nop
 8008cd4:	08008ce5 	.word	0x08008ce5
 8008cd8:	08008ceb 	.word	0x08008ceb
 8008cdc:	08008cf1 	.word	0x08008cf1
 8008ce0:	08008cf7 	.word	0x08008cf7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce8:	e00b      	b.n	8008d02 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008cea:	2302      	movs	r3, #2
 8008cec:	73fb      	strb	r3, [r7, #15]
    break;
 8008cee:	e008      	b.n	8008d02 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf4:	e005      	b.n	8008d02 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfa:	e002      	b.n	8008d02 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8008d00:	bf00      	nop
  }
  return usb_status;
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008d24:	2301      	movs	r3, #1
 8008d26:	73fb      	strb	r3, [r7, #15]
 8008d28:	e001      	b.n	8008d2e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	461a      	mov	r2, r3
 8008d32:	2101      	movs	r1, #1
 8008d34:	4803      	ldr	r0, [pc, #12]	; (8008d44 <MX_DriverVbusFS+0x34>)
 8008d36:	f7f8 ffe7 	bl	8001d08 <HAL_GPIO_WritePin>
}
 8008d3a:	bf00      	nop
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	40020800 	.word	0x40020800

08008d48 <__errno>:
 8008d48:	4b01      	ldr	r3, [pc, #4]	; (8008d50 <__errno+0x8>)
 8008d4a:	6818      	ldr	r0, [r3, #0]
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	2000002c 	.word	0x2000002c

08008d54 <__libc_init_array>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	4d0d      	ldr	r5, [pc, #52]	; (8008d8c <__libc_init_array+0x38>)
 8008d58:	4c0d      	ldr	r4, [pc, #52]	; (8008d90 <__libc_init_array+0x3c>)
 8008d5a:	1b64      	subs	r4, r4, r5
 8008d5c:	10a4      	asrs	r4, r4, #2
 8008d5e:	2600      	movs	r6, #0
 8008d60:	42a6      	cmp	r6, r4
 8008d62:	d109      	bne.n	8008d78 <__libc_init_array+0x24>
 8008d64:	4d0b      	ldr	r5, [pc, #44]	; (8008d94 <__libc_init_array+0x40>)
 8008d66:	4c0c      	ldr	r4, [pc, #48]	; (8008d98 <__libc_init_array+0x44>)
 8008d68:	f000 f8f8 	bl	8008f5c <_init>
 8008d6c:	1b64      	subs	r4, r4, r5
 8008d6e:	10a4      	asrs	r4, r4, #2
 8008d70:	2600      	movs	r6, #0
 8008d72:	42a6      	cmp	r6, r4
 8008d74:	d105      	bne.n	8008d82 <__libc_init_array+0x2e>
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
 8008d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d7c:	4798      	blx	r3
 8008d7e:	3601      	adds	r6, #1
 8008d80:	e7ee      	b.n	8008d60 <__libc_init_array+0xc>
 8008d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d86:	4798      	blx	r3
 8008d88:	3601      	adds	r6, #1
 8008d8a:	e7f2      	b.n	8008d72 <__libc_init_array+0x1e>
 8008d8c:	08008f98 	.word	0x08008f98
 8008d90:	08008f98 	.word	0x08008f98
 8008d94:	08008f98 	.word	0x08008f98
 8008d98:	08008f9c 	.word	0x08008f9c

08008d9c <malloc>:
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <malloc+0xc>)
 8008d9e:	4601      	mov	r1, r0
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	f000 b863 	b.w	8008e6c <_malloc_r>
 8008da6:	bf00      	nop
 8008da8:	2000002c 	.word	0x2000002c

08008dac <free>:
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <free+0xc>)
 8008dae:	4601      	mov	r1, r0
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	f000 b80b 	b.w	8008dcc <_free_r>
 8008db6:	bf00      	nop
 8008db8:	2000002c 	.word	0x2000002c

08008dbc <memset>:
 8008dbc:	4402      	add	r2, r0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d100      	bne.n	8008dc6 <memset+0xa>
 8008dc4:	4770      	bx	lr
 8008dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dca:	e7f9      	b.n	8008dc0 <memset+0x4>

08008dcc <_free_r>:
 8008dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dce:	2900      	cmp	r1, #0
 8008dd0:	d048      	beq.n	8008e64 <_free_r+0x98>
 8008dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd6:	9001      	str	r0, [sp, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f1a1 0404 	sub.w	r4, r1, #4
 8008dde:	bfb8      	it	lt
 8008de0:	18e4      	addlt	r4, r4, r3
 8008de2:	f000 f8ad 	bl	8008f40 <__malloc_lock>
 8008de6:	4a20      	ldr	r2, [pc, #128]	; (8008e68 <_free_r+0x9c>)
 8008de8:	9801      	ldr	r0, [sp, #4]
 8008dea:	6813      	ldr	r3, [r2, #0]
 8008dec:	4615      	mov	r5, r2
 8008dee:	b933      	cbnz	r3, 8008dfe <_free_r+0x32>
 8008df0:	6063      	str	r3, [r4, #4]
 8008df2:	6014      	str	r4, [r2, #0]
 8008df4:	b003      	add	sp, #12
 8008df6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dfa:	f000 b8a7 	b.w	8008f4c <__malloc_unlock>
 8008dfe:	42a3      	cmp	r3, r4
 8008e00:	d90b      	bls.n	8008e1a <_free_r+0x4e>
 8008e02:	6821      	ldr	r1, [r4, #0]
 8008e04:	1862      	adds	r2, r4, r1
 8008e06:	4293      	cmp	r3, r2
 8008e08:	bf04      	itt	eq
 8008e0a:	681a      	ldreq	r2, [r3, #0]
 8008e0c:	685b      	ldreq	r3, [r3, #4]
 8008e0e:	6063      	str	r3, [r4, #4]
 8008e10:	bf04      	itt	eq
 8008e12:	1852      	addeq	r2, r2, r1
 8008e14:	6022      	streq	r2, [r4, #0]
 8008e16:	602c      	str	r4, [r5, #0]
 8008e18:	e7ec      	b.n	8008df4 <_free_r+0x28>
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	b10b      	cbz	r3, 8008e24 <_free_r+0x58>
 8008e20:	42a3      	cmp	r3, r4
 8008e22:	d9fa      	bls.n	8008e1a <_free_r+0x4e>
 8008e24:	6811      	ldr	r1, [r2, #0]
 8008e26:	1855      	adds	r5, r2, r1
 8008e28:	42a5      	cmp	r5, r4
 8008e2a:	d10b      	bne.n	8008e44 <_free_r+0x78>
 8008e2c:	6824      	ldr	r4, [r4, #0]
 8008e2e:	4421      	add	r1, r4
 8008e30:	1854      	adds	r4, r2, r1
 8008e32:	42a3      	cmp	r3, r4
 8008e34:	6011      	str	r1, [r2, #0]
 8008e36:	d1dd      	bne.n	8008df4 <_free_r+0x28>
 8008e38:	681c      	ldr	r4, [r3, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	6053      	str	r3, [r2, #4]
 8008e3e:	4421      	add	r1, r4
 8008e40:	6011      	str	r1, [r2, #0]
 8008e42:	e7d7      	b.n	8008df4 <_free_r+0x28>
 8008e44:	d902      	bls.n	8008e4c <_free_r+0x80>
 8008e46:	230c      	movs	r3, #12
 8008e48:	6003      	str	r3, [r0, #0]
 8008e4a:	e7d3      	b.n	8008df4 <_free_r+0x28>
 8008e4c:	6825      	ldr	r5, [r4, #0]
 8008e4e:	1961      	adds	r1, r4, r5
 8008e50:	428b      	cmp	r3, r1
 8008e52:	bf04      	itt	eq
 8008e54:	6819      	ldreq	r1, [r3, #0]
 8008e56:	685b      	ldreq	r3, [r3, #4]
 8008e58:	6063      	str	r3, [r4, #4]
 8008e5a:	bf04      	itt	eq
 8008e5c:	1949      	addeq	r1, r1, r5
 8008e5e:	6021      	streq	r1, [r4, #0]
 8008e60:	6054      	str	r4, [r2, #4]
 8008e62:	e7c7      	b.n	8008df4 <_free_r+0x28>
 8008e64:	b003      	add	sp, #12
 8008e66:	bd30      	pop	{r4, r5, pc}
 8008e68:	200000b8 	.word	0x200000b8

08008e6c <_malloc_r>:
 8008e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6e:	1ccd      	adds	r5, r1, #3
 8008e70:	f025 0503 	bic.w	r5, r5, #3
 8008e74:	3508      	adds	r5, #8
 8008e76:	2d0c      	cmp	r5, #12
 8008e78:	bf38      	it	cc
 8008e7a:	250c      	movcc	r5, #12
 8008e7c:	2d00      	cmp	r5, #0
 8008e7e:	4606      	mov	r6, r0
 8008e80:	db01      	blt.n	8008e86 <_malloc_r+0x1a>
 8008e82:	42a9      	cmp	r1, r5
 8008e84:	d903      	bls.n	8008e8e <_malloc_r+0x22>
 8008e86:	230c      	movs	r3, #12
 8008e88:	6033      	str	r3, [r6, #0]
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e8e:	f000 f857 	bl	8008f40 <__malloc_lock>
 8008e92:	4921      	ldr	r1, [pc, #132]	; (8008f18 <_malloc_r+0xac>)
 8008e94:	680a      	ldr	r2, [r1, #0]
 8008e96:	4614      	mov	r4, r2
 8008e98:	b99c      	cbnz	r4, 8008ec2 <_malloc_r+0x56>
 8008e9a:	4f20      	ldr	r7, [pc, #128]	; (8008f1c <_malloc_r+0xb0>)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	b923      	cbnz	r3, 8008eaa <_malloc_r+0x3e>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f000 f83c 	bl	8008f20 <_sbrk_r>
 8008ea8:	6038      	str	r0, [r7, #0]
 8008eaa:	4629      	mov	r1, r5
 8008eac:	4630      	mov	r0, r6
 8008eae:	f000 f837 	bl	8008f20 <_sbrk_r>
 8008eb2:	1c43      	adds	r3, r0, #1
 8008eb4:	d123      	bne.n	8008efe <_malloc_r+0x92>
 8008eb6:	230c      	movs	r3, #12
 8008eb8:	6033      	str	r3, [r6, #0]
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f000 f846 	bl	8008f4c <__malloc_unlock>
 8008ec0:	e7e3      	b.n	8008e8a <_malloc_r+0x1e>
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	1b5b      	subs	r3, r3, r5
 8008ec6:	d417      	bmi.n	8008ef8 <_malloc_r+0x8c>
 8008ec8:	2b0b      	cmp	r3, #11
 8008eca:	d903      	bls.n	8008ed4 <_malloc_r+0x68>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	441c      	add	r4, r3
 8008ed0:	6025      	str	r5, [r4, #0]
 8008ed2:	e004      	b.n	8008ede <_malloc_r+0x72>
 8008ed4:	6863      	ldr	r3, [r4, #4]
 8008ed6:	42a2      	cmp	r2, r4
 8008ed8:	bf0c      	ite	eq
 8008eda:	600b      	streq	r3, [r1, #0]
 8008edc:	6053      	strne	r3, [r2, #4]
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f000 f834 	bl	8008f4c <__malloc_unlock>
 8008ee4:	f104 000b 	add.w	r0, r4, #11
 8008ee8:	1d23      	adds	r3, r4, #4
 8008eea:	f020 0007 	bic.w	r0, r0, #7
 8008eee:	1ac2      	subs	r2, r0, r3
 8008ef0:	d0cc      	beq.n	8008e8c <_malloc_r+0x20>
 8008ef2:	1a1b      	subs	r3, r3, r0
 8008ef4:	50a3      	str	r3, [r4, r2]
 8008ef6:	e7c9      	b.n	8008e8c <_malloc_r+0x20>
 8008ef8:	4622      	mov	r2, r4
 8008efa:	6864      	ldr	r4, [r4, #4]
 8008efc:	e7cc      	b.n	8008e98 <_malloc_r+0x2c>
 8008efe:	1cc4      	adds	r4, r0, #3
 8008f00:	f024 0403 	bic.w	r4, r4, #3
 8008f04:	42a0      	cmp	r0, r4
 8008f06:	d0e3      	beq.n	8008ed0 <_malloc_r+0x64>
 8008f08:	1a21      	subs	r1, r4, r0
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f000 f808 	bl	8008f20 <_sbrk_r>
 8008f10:	3001      	adds	r0, #1
 8008f12:	d1dd      	bne.n	8008ed0 <_malloc_r+0x64>
 8008f14:	e7cf      	b.n	8008eb6 <_malloc_r+0x4a>
 8008f16:	bf00      	nop
 8008f18:	200000b8 	.word	0x200000b8
 8008f1c:	200000bc 	.word	0x200000bc

08008f20 <_sbrk_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d06      	ldr	r5, [pc, #24]	; (8008f3c <_sbrk_r+0x1c>)
 8008f24:	2300      	movs	r3, #0
 8008f26:	4604      	mov	r4, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	602b      	str	r3, [r5, #0]
 8008f2c:	f7f8 fb36 	bl	800159c <_sbrk>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d102      	bne.n	8008f3a <_sbrk_r+0x1a>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	b103      	cbz	r3, 8008f3a <_sbrk_r+0x1a>
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	200008d0 	.word	0x200008d0

08008f40 <__malloc_lock>:
 8008f40:	4801      	ldr	r0, [pc, #4]	; (8008f48 <__malloc_lock+0x8>)
 8008f42:	f000 b809 	b.w	8008f58 <__retarget_lock_acquire_recursive>
 8008f46:	bf00      	nop
 8008f48:	200008d8 	.word	0x200008d8

08008f4c <__malloc_unlock>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__malloc_unlock+0x8>)
 8008f4e:	f000 b804 	b.w	8008f5a <__retarget_lock_release_recursive>
 8008f52:	bf00      	nop
 8008f54:	200008d8 	.word	0x200008d8

08008f58 <__retarget_lock_acquire_recursive>:
 8008f58:	4770      	bx	lr

08008f5a <__retarget_lock_release_recursive>:
 8008f5a:	4770      	bx	lr

08008f5c <_init>:
 8008f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5e:	bf00      	nop
 8008f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f62:	bc08      	pop	{r3}
 8008f64:	469e      	mov	lr, r3
 8008f66:	4770      	bx	lr

08008f68 <_fini>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	bf00      	nop
 8008f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6e:	bc08      	pop	{r3}
 8008f70:	469e      	mov	lr, r3
 8008f72:	4770      	bx	lr
